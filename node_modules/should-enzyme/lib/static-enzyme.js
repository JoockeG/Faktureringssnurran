(function (global, factory) {
  if (typeof define === "function" && define.amd) {
    define(['exports', './base-enzyme'], factory);
  } else if (typeof exports !== "undefined") {
    factory(exports, require('./base-enzyme'));
  } else {
    var mod = {
      exports: {}
    };
    factory(mod.exports, global.baseEnzyme);
    global.staticEnzyme = mod.exports;
  }
})(this, function (exports, _baseEnzyme) {
  'use strict';

  Object.defineProperty(exports, "__esModule", {
    value: true
  });

  var _baseEnzyme2 = _interopRequireDefault(_baseEnzyme);

  function _interopRequireDefault(obj) {
    return obj && obj.__esModule ? obj : {
      default: obj
    };
  }

  function _classCallCheck(instance, Constructor) {
    if (!(instance instanceof Constructor)) {
      throw new TypeError("Cannot call a class as a function");
    }
  }

  var _createClass = function () {
    function defineProperties(target, props) {
      for (var i = 0; i < props.length; i++) {
        var descriptor = props[i];
        descriptor.enumerable = descriptor.enumerable || false;
        descriptor.configurable = true;
        if ("value" in descriptor) descriptor.writable = true;
        Object.defineProperty(target, descriptor.key, descriptor);
      }
    }

    return function (Constructor, protoProps, staticProps) {
      if (protoProps) defineProperties(Constructor.prototype, protoProps);
      if (staticProps) defineProperties(Constructor, staticProps);
      return Constructor;
    };
  }();

  function _possibleConstructorReturn(self, call) {
    if (!self) {
      throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
    }

    return call && (typeof call === "object" || typeof call === "function") ? call : self;
  }

  function _inherits(subClass, superClass) {
    if (typeof superClass !== "function" && superClass !== null) {
      throw new TypeError("Super expression must either be null or a function, not " + typeof superClass);
    }

    subClass.prototype = Object.create(superClass && superClass.prototype, {
      constructor: {
        value: subClass,
        enumerable: false,
        writable: true,
        configurable: true
      }
    });
    if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;
  }

  var StaticEnzyme = function (_BaseEnzyme) {
    _inherits(StaticEnzyme, _BaseEnzyme);

    function StaticEnzyme(enzymeWrapper) {
      _classCallCheck(this, StaticEnzyme);

      var _this = _possibleConstructorReturn(this, (StaticEnzyme.__proto__ || Object.getPrototypeOf(StaticEnzyme)).call(this));

      _this.enzyme = enzymeWrapper;
      return _this;
    }

    _createClass(StaticEnzyme, [{
      key: 'name',
      value: function name() {
        var node = this.element.get(0);

        if (node) return node.name;

        return null;
      }
    }, {
      key: 'prop',
      value: function prop() {
        throw new Error('Enzyme static render method (Cheerio) does not support React props.');
      }
    }, {
      key: 'props',
      value: function props() {
        throw new Error('Enzyme static render method (Cheerio) does not support React props.');
      }
    }, {
      key: 'state',
      value: function state() {
        throw new Error('Enzyme static render method (Cheerio) does not support React state.');
      }
    }, {
      key: 'classNames',
      value: function classNames() {
        return this.attr('class');
      }
    }, {
      key: 'hasClass',
      value: function hasClass(className) {
        return this.element.hasClass(className);
      }
    }, {
      key: 'attr',
      value: function attr(name) {
        return this.element.attr(name);
      }
    }, {
      key: 'checked',
      value: function checked() {
        return this.element.is(':checked');
      }
    }, {
      key: 'containNodes',
      value: function containNodes() {
        throw new Error('Enzyme static render method (Cheerio) does not support "contain" check');
      }
    }, {
      key: 'element',
      get: function get() {
        if (!this.__element) {
          if (this.enzyme.first()['0'].type === 'root') {
            this.__element = this.enzyme.children().first();
          } else {
            this.__element = this.enzyme.first();
          }
        }

        return this.__element;
      }
    }]);

    return StaticEnzyme;
  }(_baseEnzyme2.default);

  exports.default = StaticEnzyme;
});