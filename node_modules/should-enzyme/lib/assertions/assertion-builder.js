(function (global, factory) {
  if (typeof define === "function" && define.amd) {
    define(['exports', '../wrapper', 'should'], factory);
  } else if (typeof exports !== "undefined") {
    factory(exports, require('../wrapper'), require('should'));
  } else {
    var mod = {
      exports: {}
    };
    factory(mod.exports, global.wrapper, global.should);
    global.assertionBuilder = mod.exports;
  }
})(this, function (exports, _wrapper, _should) {
  'use strict';

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.assertionBuilder = assertionBuilder;

  var _wrapper2 = _interopRequireDefault(_wrapper);

  var _should2 = _interopRequireDefault(_should);

  function _interopRequireDefault(obj) {
    return obj && obj.__esModule ? obj : {
      default: obj
    };
  }

  var Assertion = _should2.default.Assertion,
      slice = Array.prototype.slice;
  /**
   * assertionBuilder: extend shouldjs api and access ShouldEnzyme wrapper to assert with.
   *
   * @param name            name of assertion
   * @param assertFn        callback return a boolean for assert, args passed through, this is BaseEnzyme
   * @param failMessageFn   callback return fail message, args passed through, this is BaseEnzyme.
   */

  /* Deprecated 
   * Offers too little flexibility to build custom assertion, best to use the should.Assertion.add.
   * see src/assertions/contain.js for example
  */
  function assertionBuilder(name, assertFn, failMessageFn) {
    var wrapperBuilder = arguments.length <= 3 || arguments[3] === undefined ? _wrapper2.default : arguments[3];


    Assertion.add(name, function () {
      var wrapper = wrapperBuilder(this.obj),
          args = slice.call(arguments);

      this.params = {
        message: failMessageFn.apply(wrapper, args)
      };

      (0, _should2.default)(assertFn.apply(wrapper, args)).be.true(' ');
    });
  }
});