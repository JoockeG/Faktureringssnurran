(function (global, factory) {
  if (typeof define === "function" && define.amd) {
    define(['../wrapper', '../assert-key-value', 'should'], factory);
  } else if (typeof exports !== "undefined") {
    factory(require('../wrapper'), require('../assert-key-value'), require('should'));
  } else {
    var mod = {
      exports: {}
    };
    factory(global.wrapper, global.assertKeyValue, global.should);
    global.prop = mod.exports;
  }
})(this, function (_wrapper, _assertKeyValue, _should) {
  'use strict';

  var _wrapper2 = _interopRequireDefault(_wrapper);

  var _assertKeyValue2 = _interopRequireDefault(_assertKeyValue);

  var _should2 = _interopRequireDefault(_should);

  function _interopRequireDefault(obj) {
    return obj && obj.__esModule ? obj : {
      default: obj
    };
  }

  var Assertion = _should2.default.Assertion;

  Assertion.add('prop', function (expectedKey, expectedValue) {
    var wrapper = (0, _wrapper2.default)(this.obj),
        wrapperProp = wrapper.prop(expectedKey);

    if (arguments.length > 1 && typeof wrapperProp !== 'undefined') {
      this.params = {
        actual: wrapper.name(),
        operator: 'prop \'' + expectedKey + '\' to have value \'' + expectedValue + '\', instead found \'' + wrapperProp + '\''
      };
      (0, _should2.default)((0, _assertKeyValue2.default)(wrapperProp, expectedValue)).be.true(' ');
    } else {
      this.params = {
        actual: wrapper.name(),
        operator: 'to have prop \'' + expectedKey + '\''
      };
      (0, _should2.default)((0, _assertKeyValue2.default)(wrapperProp)).be.true(' ');
    }
  });
});