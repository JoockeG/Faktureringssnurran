(function (global, factory) {
  if (typeof define === "function" && define.amd) {
    define(['exports'], factory);
  } else if (typeof exports !== "undefined") {
    factory(exports);
  } else {
    var mod = {
      exports: {}
    };
    factory(mod.exports);
    global.baseEnzyme = mod.exports;
  }
})(this, function (exports) {
  'use strict';

  Object.defineProperty(exports, "__esModule", {
    value: true
  });

  function _classCallCheck(instance, Constructor) {
    if (!(instance instanceof Constructor)) {
      throw new TypeError("Cannot call a class as a function");
    }
  }

  var _createClass = function () {
    function defineProperties(target, props) {
      for (var i = 0; i < props.length; i++) {
        var descriptor = props[i];
        descriptor.enumerable = descriptor.enumerable || false;
        descriptor.configurable = true;
        if ("value" in descriptor) descriptor.writable = true;
        Object.defineProperty(target, descriptor.key, descriptor);
      }
    }

    return function (Constructor, protoProps, staticProps) {
      if (protoProps) defineProperties(Constructor.prototype, protoProps);
      if (staticProps) defineProperties(Constructor, staticProps);
      return Constructor;
    };
  }();

  var BaseEnzyme = function () {
    function BaseEnzyme() {
      _classCallCheck(this, BaseEnzyme);
    }

    _createClass(BaseEnzyme, [{
      key: 'prop',
      value: function prop(key) {
        return this.enzyme.prop(key);
      }
    }, {
      key: 'props',
      value: function props(keys) {
        var props = this.enzyme.props();

        if (Array.isArray(keys)) {
          return keys.reduce(function (acc, key) {
            if (key in props) acc[key] = props[key];
            return acc;
          }, {});
        }

        return props;
      }
    }, {
      key: 'state',
      value: function state(key) {
        if (typeof key !== 'undefined') return this.enzyme.state(key);
      }
    }, {
      key: 'name',
      value: function name() {
        return this.enzyme.name();
      }
    }, {
      key: 'text',
      value: function text() {
        return this.enzyme.text();
      }
    }, {
      key: 'value',
      value: function value() {
        if (['select', 'textarea'].indexOf(this.name()) > -1) return this.element.val();

        return this.element.attr('value');
      }
    }, {
      key: 'isPresent',
      value: function isPresent() {
        return this.enzyme.length > 0;
      }
    }, {
      key: 'containNodes',
      value: function containNodes(node) {
        return this.enzyme.contains(node);
      }
    }]);

    return BaseEnzyme;
  }();

  exports.default = BaseEnzyme;
});