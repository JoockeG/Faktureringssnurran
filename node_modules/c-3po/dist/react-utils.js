'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.reactMsgid2Orig = exports.getReactMsgid = exports.buildArr = undefined;

var _slicedToArray = function () { function sliceIterator(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"]) _i["return"](); } finally { if (_d) throw _e; } } return _arr; } return function (arr, i) { if (Array.isArray(arr)) { return arr; } else if (Symbol.iterator in Object(arr)) { return sliceIterator(arr, i); } else { throw new TypeError("Invalid attempt to destructure non-iterable instance"); } }; }();

var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _utils = require('./utils');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var reactSymbol = Symbol.for('react.element');

function isReactEl(el) {
    return el.$$typeof === reactSymbol;
}

var buildArr = exports.buildArr = function buildArr(strs, exprs) {
    return strs.reduce(function (r, s, i) {
        return r.concat(s).concat(exprs[i] || '');
    }, []);
};

var getReactMsgid = exports.getReactMsgid = function getReactMsgid(strs, exprs) {
    var result = [];
    var reactElsCount = 0;

    strs.forEach(function (str, i) {
        var chunk = str;
        var expr = exprs[i];
        if ((typeof expr === 'undefined' ? 'undefined' : _typeof(expr)) === 'object' && isReactEl(expr)) {
            if (typeof expr.props.children === 'string') {
                chunk += '<' + reactElsCount + '>' + expr.props.children + '</' + reactElsCount + '>';
            } else {
                chunk += '${ ' + i + ' }';
            }
            reactElsCount += 1;
        } else if (expr !== undefined) {
            chunk += '${ ' + i + ' }';
        }
        result.push(chunk);
    });

    return result.join('');
};

var reactMsgid2Orig = exports.reactMsgid2Orig = function reactMsgid2Orig(id, exprs) {
    var cloneId = id.slice();
    var result = [];
    var reactIndex = 0;
    var simpleIndex = 0;

    var termReg = /^(.*?)[<\$]/;
    var reactReg = function reactReg(i) {
        return new RegExp('<' + i + '>(.*)</' + i + '>');
    };
    var match = cloneId.match(termReg);
    var exprIdx = 0;
    while (match) {
        result.push(match[1]);
        cloneId = cloneId.replace(new RegExp('^' + match[1]), '');
        if (cloneId[0] === '<') {
            var _cloneId$match = cloneId.match(reactReg(reactIndex)),
                _cloneId$match2 = _slicedToArray(_cloneId$match, 2),
                tagEl = _cloneId$match2[0],
                children = _cloneId$match2[1];

            cloneId = cloneId.replace(tagEl, '');
            var expr = exprs[exprIdx];
            var newExpr = _react2.default.cloneElement(expr, expr.props, children);
            result.push(newExpr);
            reactIndex += 1;
            exprIdx += 1;
        }
        if (cloneId[0] === '$') {
            var el = cloneId.match((0, _utils.reg)(simpleIndex))[0];
            cloneId = cloneId.replace(el, '');
            result.push(exprs[exprIdx]);
            simpleIndex += 1;
            exprIdx += 1;
        }
        match = cloneId.match(termReg);
    }

    return result;
};