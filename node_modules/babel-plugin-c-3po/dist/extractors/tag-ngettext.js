'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});

var _babelTypes = require('babel-types');

var t = _interopRequireWildcard(_babelTypes);

var _utils = require('../utils');

var _defaults = require('../defaults');

var _errors = require('../errors');

var _babelTemplate = require('babel-template');

var _babelTemplate2 = _interopRequireDefault(_babelTemplate);

var _poHelpers = require('../po-helpers');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

var MSGID = _defaults.PO_PRIMITIVES.MSGID,
    MSGSTR = _defaults.PO_PRIMITIVES.MSGSTR,
    MSGID_PLURAL = _defaults.PO_PRIMITIVES.MSGID_PLURAL;

var NAME = 'tag-ngettext';

function validateExpresssions(expressions) {
    expressions.forEach(function (exp) {
        if (!(0, _utils.isValidQuasiExpression)(exp)) {
            throw new _errors.ValidationError('You can not use ' + exp.type + ' \'${' + (0, _utils.ast2Str)(exp) + '}\' in localized strings');
        }
    });
}

function validateNPlural(exp) {
    if (!t.isIdentifier(exp) && !t.isNumericLiteral(exp) && !t.isMemberExpression(exp)) {
        throw new _errors.ValidationError(exp.type + ' \'' + (0, _utils.ast2Str)(exp) + '\' can not be used as plural number argument');
    }
}

var validate = function validate(node) {
    validateExpresssions(node.quasi.expressions);
    validateNPlural(node.tag.arguments[0]);
    var msgid = (0, _utils.template2Msgid)(node);
    if (!(0, _poHelpers.hasUsefulInfo)(msgid)) {
        throw new _errors.ValidationError('Can not translate \'' + (0, _utils.getQuasiStr)(node) + '\'');
    }
};

function ngettextTemplate(ngettext, pluralForm) {
    return (0, _babelTemplate2.default)('function NGETTEXT(n, args) { ' + (0, _poHelpers.pluralFnBody)(pluralForm) + ' }')({ NGETTEXT: ngettext });
}

function getNgettextUID(state, pluralFunc) {
    /* eslint-disable no-underscore-dangle */
    if (!state.file.__ngettextUid) {
        var uid = state.file.scope.generateUidIdentifier('tag_ngettext');
        state.file.path.unshiftContainer('body', ngettextTemplate(uid, pluralFunc));
        state.file.__ngettextUid = uid;
    }
    return state.file.__ngettextUid;
}

function extract(node, context) {
    var _translate;

    var nplurals = (0, _poHelpers.getNPlurals)(context.getHeaders());
    var msgid = context.isDedent() ? (0, _utils.dedentStr)((0, _utils.template2Msgid)(node)) : (0, _utils.template2Msgid)(node);
    var translate = (_translate = {}, _defineProperty(_translate, MSGID, msgid), _defineProperty(_translate, MSGID_PLURAL, msgid), _defineProperty(_translate, MSGSTR, []), _translate);

    for (var i = 0; i < nplurals; i++) {
        translate[MSGSTR][i] = '';
    }

    return translate;
}

function match(node, context) {
    return t.isTaggedTemplateExpression(node) && node.tag.callee && node.tag.callee.name === context.getAliasFor(NAME);
}

function resolveDefault(node, context) {
    var transStr = context.isDedent() ? (0, _utils.dedentStr)((0, _utils.getQuasiStr)(node)) : (0, _utils.getQuasiStr)(node);
    if ((0, _utils.hasExpressions)(node)) {
        return node.quasi;
    }
    return t.stringLiteral(transStr);
}

function resolve(node, translationObj, context, state) {
    var args = translationObj[MSGSTR];
    var tagArg = node.tag.arguments[0];
    var exprs = node.quasi.expressions.map(_utils.ast2Str);

    if (t.isIdentifier(tagArg) || t.isMemberExpression(tagArg)) {
        return (0, _babelTemplate2.default)('NGETTEXT(N, ARGS)')({
            NGETTEXT: getNgettextUID(state, (0, _poHelpers.getPluralFunc)(context.getHeaders())),
            N: tagArg,
            ARGS: t.arrayExpression(args.map(function (l) {
                var _tpl = (0, _babelTemplate2.default)((0, _utils.msgid2Orig)(l, exprs))(),
                    _tpl$expression = _tpl.expression,
                    quasis = _tpl$expression.quasis,
                    expressions = _tpl$expression.expressions;

                return t.templateLiteral(quasis, expressions);
            }))
        });
    }

    if (t.isLiteral(tagArg)) {
        var pluralFn = (0, _poHelpers.makePluralFunc)((0, _poHelpers.getPluralFunc)(context.getHeaders()));
        var orig = (0, _utils.msgid2Orig)(pluralFn(tagArg.value, args), exprs);
        return (0, _babelTemplate2.default)(orig)();
    }

    return undefined;
}

exports.default = { match: match, extract: extract, resolve: resolve, resolveDefault: resolveDefault, validate: validate, name: NAME, getMsgid: _utils.template2Msgid };