/**
 * @param {String} value
 *
 * @return {Boolean}
 */
const hasInvalidLength = value => value.trim().length !== 13;

/**
 * @param {String} value
 *
 * @return {number}
 */
const getCheckDigit = (value) => {
	const trimmed = value.trim();
	const lastDigit = trimmed[trimmed.length - 1];

	return parseInt(lastDigit, 10);
};

/**
	* @param {String} value
	*
	* @return {String}
	*/
const getNoCheckDigit = value => value.substring(0, value.length - 1);


/**
 * @param {String} valueNoCheckDigit
 *
 * @return {number}
 */
const sumEven = valueNoCheckDigit => Array.from(valueNoCheckDigit)
		.reduce((memo, num, index) => {
			if (index % 2 !== 0) {
				return parseInt(memo, 10) + parseInt(num, 10);
			}
			return parseInt(memo, 10);
		}, 0);

/**
 * @private
 * @memberOf FormFieldGLN
 * @param {number} result
 *
 * @return {number}
 */
const getCalculatedCheckDigit = (result) => {
	if (result !== 0) {
		return 10 - result;
	}
	return 0;
};

/**
 * @param {String} valueNoCheckDigit
 *
 * @return {number}
 */
const sumOdd = valueNoCheckDigit => Array.from(valueNoCheckDigit)
		.reduce((memo, num, index) => {
			if (index % 2 === 0) {
				return parseInt(memo, 10) + parseInt(num, 10);
			}
			return parseInt(memo, 10);
		}, 0);


/**
 * @description
 *
 * Check if the value is a valid GLN, returns an error message otherwise.
 *
 * @param {String} value
 *
 * @return {Boolean}
 */
const isValidGLN = (value) => {
	const calculation = sumEven(getNoCheckDigit(value)) * 3 + sumOdd(getNoCheckDigit(value));
	const stringifiedReslut = String(calculation);
	const resultsLastDigit = stringifiedReslut[stringifiedReslut.length - 1];
	const result = parseInt(resultsLastDigit, 10);

	return getCalculatedCheckDigit(result) === getCheckDigit(value);
};

export { hasInvalidLength, isValidGLN };
