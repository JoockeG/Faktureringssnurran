// Migrate to a better IBAN validation, we did not initially write this
// but there seem to be a better one available at: https://github.com/arhs/iban.js/blob/master/iban.js
// For now we have to override our jshint to run with this older version.

const codes = {
	A: 10,
	B: 11,
	C: 12,
	D: 13,
	E: 14,
	F: 15,
	G: 16,
	H: 17,
	I: 18,
	J: 19,
	K: 20,
	L: 21,
	M: 22,
	N: 23,
	O: 24,
	P: 25,
	Q: 26,
	R: 27,
	S: 28,
	T: 29,
	U: 30,
	V: 31,
	W: 32,
	X: 33,
	Y: 34,
	Z: 35
};

/**
 * @description
 *
 * Strip whitespaces an substring the value
 *
 * @param {String} value - input value
 *
 * @return {Boolean}
 */
const getRearrangedValue = (value) => {
	if (value === null) {
		return '';
	}

	const val = value.replace(/\s+/g, '');
	const prefix = val.substring(0, 4);
	const rearranged = `${val.substring(4, val.length)}${prefix}`;
	return rearranged;
};

/**
 * @param {String} value - input value
 * @param {String} rearranged - rearranged value
 *
 * @return {String}
 */
const getDivident = (value, rearranged) => {
	let divident = '';
	for (let i = 0; i < rearranged.length; i += 1) {
		const node = rearranged.substring(i, i + 1).toUpperCase();
		if (isNaN(node)) {
			divident += codes[node];
		} else {
			divident += parseInt(node, 10);
		}
	}
	return divident;
};

/**
 * @description
 *
 * Validate value is a valid IBAN number
 *
 * @param {String} value - input value
 *
 * @return {Boolean}
 */
const isValidIBAN = (value) => {
	const rearranged = getRearrangedValue(value);
	const divident = getDivident(value, rearranged);
	const divisor = 97;
	let cDivident = '';
	let cRest = '';

	for (let j = 0; j < divident.length; j += 1) {
		const cChar = divident.substring(j, j + 1);
		const cOperator = `${cRest}${cDivident}${cChar}`;
		if (cOperator < parseInt(divisor, 10)) {
			cDivident += `${cChar}`;
		} else {
			cRest = cOperator % divisor;
			if (cRest === '0') {
				cRest = '';
			}
			cDivident = '';
		}
	}

	cRest = (isNaN(cRest) || cRest === '' ? 0 : parseInt(cRest, 10));
	cDivident = (isNaN(cDivident) || cDivident === '' ? 0 : parseInt(cDivident, 10));
	cRest += cDivident;
	if (cRest === 1) {
		return true;
	}

	return false;
};

export default isValidIBAN;
