import React from 'react';
import PropTypes from 'prop-types';

class Popover extends React.Component {

	constructor(props) {
		super(props);
		this.state = {
			isVisible: false
		};

		this.fnOnUserHidePopover = this.onUserHidePopover.bind(this);
	}

	/**
	 * @memberOf Popover
	 * @private
	 *
	 * @description
	 * Setup eventlisteners for hiding
	 *
	 * @returns {undefined}
	 */
	componentDidMount() {
		document.addEventListener('mouseup', this.fnOnUserHidePopover, false);
	}

	/**
	 * @memberOf Popover
	 * @private
	 *
	 * @description
	 * Cleanup eventlisteners
	 *
	 * @returns {undefined}
	 */
	componentWillUnmount() {
		document.removeEventListener('mouseup', this.fnOnUserHidePopover, false);
	}

	/**
	 * @memberOf Popover
	 * @private
	 *
	 * @description
	 * When hiding the Popover set state isVisible state to false
	 *
	 * @param {SyntheticEvent} e
	 *
	 * @returns {undefined}
	 */
	onUserHidePopover(e) {
		if (this.isWithinPopover(e)) { return null; }
		return this.setState({ isVisible: false });
	}

	/**
	 * @memberOf Popover
	 * @private
	 *
	 * @description
	 * Determine if the event took place inside of the Popover
	 *
	 * @param {SyntheticEvent} e
	 *
	 * @return {Boolean}
	 */
	isWithinPopover(e) {
		return this.state.isVisible && this.container.contains(e.target);
	}

	/**
	 * @memberOf Popover
	 * @private
	 *
	 * @description
	 * When clicking on the wrapper, show the Popover
	 *
	 * @param {SyntheticEvent} e
	 *
	 * @returns {undefined}
	 */
	onUserMouseDown(e) {
		if (this.isWithinPopover(e)) { return null; }
		return this.setState({ isVisible: !this.state.isVisible });
	}

	/**
	 * @memberOf Popover
	 * @private
	 *
	 * @description
	 * When clicking on the wrapper, show the Popover
	 *
	 * @returns {Object} React Elements
	 */
	getContent() {
		return React.cloneElement(this.props.children[1], {
			isVisible: this.state.isVisible,
			maxHeight: this.props.maxHeight
		});
	}

	/**
	 * @memberOf Popover
	 * @private
	 *
	 * @description
	 * Generate a list of css classes
	 *
	 * @returns {String}
	 */
	getCSSClasses() {
		return [
			'popover-container',
			this.props.className
		].join(' ');
	}

	/**
	 * @memberOf Popover
	 * @private
	 *
	 * @description
	 * Render the Popover
	 *
	 * @returns {Object} React Elements
	 */
	render() {
		return (
			<div
				className={this.getCSSClasses()}
				onMouseDown={this.onUserMouseDown.bind(this)}
				ref={(el) => { this.container = el; }}
			>
				{this.props.children[0]}
				{this.getContent()}
			</div>
		);
	}

}

Popover.defaultProps = {
	className: ''
};

Popover.propTypes = {
	className: PropTypes.string,
	maxHeight: PropTypes.number,
	children: PropTypes.node.isRequired
};

export default Popover;
