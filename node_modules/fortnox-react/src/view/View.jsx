import React from 'react';
import PropTypes from 'prop-types';
import Spinner from './ViewSpinner';

/**
 * The React View Component
 * The main view Container
 *
 * @class
 * @name View
 *
 * @return {View}
 */
class View extends React.Component {

	constructor(props) {
		super(props);
		this.state = {
			isFinished: false
		};
	}

	/**
	 * @memberOf View
	 * Tell the view we are finished and ready to show
	 * the view visually.
	 *
	 * @returns {undefined}
	 */
	finished() {
		this.setState({ isFinished: true });
	}

	/**
	 * @memberOf View
	 * @private
	 *
	 * @description
	 * Returns a string of css classed to be used on the view.
	 *
	 * @return {String}
	 */
	getClasses() {
		return [
			'flex-view-container',
			'view',
			this.state.isFinished ? 'view-active' : ''
		].join(' ');
	}

	/**
	 * @memberOf View
	 * @private
	 *
	 * @description
	 * Get style of the spinner Container.
	 *
	 * @return {Object} - React internals
	 */
	getSpinnerContainerStyle() {
		return {
			display: !this.state.isFinished ? 'block' : 'none'
		};
	}

	/**
	 * @memberOf View
	 * @private
	 *
	 * @description
	 * Renders the flex view Container and the children.
	 * If the view is still loading a spinning animation will be shown.
	 *
	 * @return {Object} - React internals
	 */
	render() {
		return (
			<div className="outer-view-container">
				<div className="spinner-container" style={this.getSpinnerContainerStyle()}>
					<Spinner isActive={!this.state.isFinished} />
				</div>
				<div className={this.getClasses()}>
					{this.props.children}
				</div>
			</div>
		);
	}

}

View.propTypes = {
	children: PropTypes.node.isRequired
};

export default View;
