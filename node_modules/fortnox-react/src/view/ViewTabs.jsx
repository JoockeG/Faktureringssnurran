import React from 'react';
import PropTypes from 'prop-types';
import TabTitle from './ViewTabTitle';
import Spinner from './ViewSpinner';

class ViewTabs extends React.Component {

	/**
	 * Render null for each child that does not correspond to the active state.
	 * Rendering null instead of filtering is the correct way todo this since squashing
	 * the array would mess upp reconciliation internally in React.
	 * @return {Array}
	 */
	getCurrentTabContent() {
		if (this.props.isLoading) {
			return <Spinner ner isActive />;
		}
		return React.Children.map(this.props.children, (child, index) => {
			if (this.props.active === index && child) {
				return child;
			}
			return null;
		});
	}

	/**
	 * Render a list of tab title buttons.
	 * @return {Array}
	 */
	getTabTitles() {
		return React.Children.map(this.props.children, (child, index) => <TabTitle
			isActive={index === this.props.active}
			onClick={() => { this.props.onChangeTab(index); child.props.onClick(); }}
		>{child.props.title}</TabTitle>);
	}

	render() {
		return (
			<div className={`view-tabs-container ${this.props.className}`}>
				<div className="view-tab-titles">{this.getTabTitles()}</div>
				<div className="view-tab-content">{this.getCurrentTabContent()}</div>
			</div>
		);
	}

}

ViewTabs.defaultProps = {
	className: '',
	isLoading: false,
	active: 0,
	onChangeTab() { return null; }
};

ViewTabs.propTypes = {
	children: PropTypes.node.isRequired,
	className: PropTypes.string,
	isLoading: PropTypes.bool.isRequired,
	active: PropTypes.number.isRequired,
	onChangeTab: PropTypes.func
};

export default ViewTabs;
