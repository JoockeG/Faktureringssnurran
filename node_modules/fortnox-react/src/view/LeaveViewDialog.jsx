import React from 'react';
import PropTypes from 'prop-types';
import { t as gettext } from 'c-3po';
import Dialog from '../utils/Dialog';
import Button from '../form/Button';
import Row from '../flexbox/Row';
import Column from '../flexbox/Column';
import customPropValidation from '../utils/PropValidation';
import trackerevents from '../utils/ChangeTrackerEvents';

// Default number of form changes before dialog appears
const DEFAULT_FIELD_CHANGES = 3;

class LeaveViewDialog extends React.Component {

	constructor(props, contextTypes) {
		super(props, contextTypes);
		this.state = {
			shouldShowDialog: false
		};

		this.changeCounter = 0;
	}

	componentDidMount() {
		this.props.model.on('sync', this.resetFieldChanges, this);
		this.unblockRouter = this.context.router.history.block(this.routerWillLeave.bind(this));
		trackerevents.on(this.getEvent(), this.addFieldChange, this);
	}

	/**
	 * Clean up events and reset the number of changes each time we unmount the
	 * component.
	 * @return {undefined}
	 */
	componentWillUnmount() {
		this.resetFieldChanges();
		this.props.model.off('sync', this.resetFieldChanges, this);
		trackerevents.off(this.getEvent(), this.addFieldChange, this);
		this.unblockRouter();
	}

	getEvent() {
		return [this.props.route.path, 'formchange'].join(':');
	}

	resetFieldChanges() {
		this.changeCounter = 0;
	}

	addFieldChange() {
		this.changeCounter += 1;
	}

	shouldLeaveView() {
		return this.changeCounter < this.props.threshold;
	}

	routerWillLeave(route) {
		if (this.shouldLeaveView()) { return true; }
		this.setState({
			shouldShowDialog: true,
			next: route
		});
		return false;
	}

	/**
	 * Save the model, and then continue route-transitioning
	 * @return {Promise}
	 */
	continueTransition() {
		return this.props.model.save()
			.then(this.endTransition.bind(this));
	}

	endTransition() {
		return new Promise(resolve => {
			this.setState({
				shouldShowDialog: false
			}, () => {
				this.resetFieldChanges();
				this.context.router.history.push(this.state.next.pathname);
				resolve();
			});
		});
	}

	render() {
		return (
			<Dialog width="270" height="125" isOpen={this.state.shouldShowDialog} blockViewport title={gettext`Spara ändringar`}>
				<div style={{ marginTop: 5, marginBottom: 5 }}>
					{gettext`Du har osparade ändringar i vyn, vill du spara?`}
				</div>
				<Row>
					<Column width="0">
						<Button onClick={this.endTransition.bind(this)}> Nej </Button>
					</Column>
					<Column width="0">
						<Button color="green" onClick={this.continueTransition.bind(this)}> Ja </Button>
					</Column>
				</Row>
			</Dialog>
		);
	}

}

LeaveViewDialog.contextTypes = {
	router: PropTypes.object.isRequired
};

// No its not a typo, it is "router" above and "route" below :)
LeaveViewDialog.propTypes = {
	threshold: PropTypes.number.isRequired,
	route: PropTypes.object.isRequired,
	model: customPropValidation.model.isRequired
};

LeaveViewDialog.defaultProps = {
	threshold: DEFAULT_FIELD_CHANGES
};

export default LeaveViewDialog;
