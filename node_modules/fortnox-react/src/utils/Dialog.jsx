import React from 'react';
import PropTypes from 'prop-types';
import Draggable from 'react-draggable';
import ViewportBlocker from '../view/ViewportBlocker';

const OFFSET_TOP_HEADER = 50;
const OFFSET_HORIZONTAL_POS = 10;
const ESC_KEY = 27;

const CloseButton = (props) => {
	if (!props.onClose) {
		return null;
	}
	return <div className="fa fa-close close" onClick={props.onClose} />;
};

CloseButton.defaultProps = {
	onClose: null
};

CloseButton.propTypes = {
	onClose: PropTypes.func
};


/**
 * React dialog component.
 *
 * @class Dialog
 */
class Dialog extends React.Component {
	constructor(props) {
		super(props);
		this.state = {
			active: false
		};

		this.ctxClickDialog = this.clickDialog.bind(this);
		this.handleKeyUp = this.handleKeyUp.bind(this);
	}

	componentDidMount() {
		document.addEventListener('mousedown', this.ctxClickDialog, false);
		this.container.focus();
	}

	componentWillUnmount() {
		document.removeEventListener('mousedown', this.ctxClickDialog, false);
	}

	/**
	 * Get the correct css classes of the dialog.
	 *
	 * @return {Object} Default props.
	 */
	getContainerClasses() {
		return [
			'dialog-container',
			this.props.blockViewport ? 'dialog-viewport-blocker' : ''
		].join(' ');
	}

	/**
	 * Return correct width/height
	 * Set the dialog to the middle by making it 50% top/left
	 * and then inverting the width/height / 2.
	 *
	 * @return {Object}
	 */
	getDefaultDimensions() {
		return this.props.getDimensions(Object.assign({
			width: parseInt(this.props.width, 10),
			height: this.props.height,
			top: OFFSET_TOP_HEADER,
			left: '50%',
			marginTop: 0,
			marginLeft: (parseInt(this.props.width, 10) / 2) * -1
		}, this.props.dialogStyle));
	}

	getContainerStyle() {
		return Object.assign({
			display: this.props.isOpen ? 'block' : 'none'
		}, this.props.containerStyle);
	}

	/**
	 * Prevents dragging over view-title and header and horizontally offscreen
	 * @return {Object}
	 */
	getMovementBoundaries() {
		return {
			top: 0,
			bottom: window.innerHeight - 110,
			left: ((window.innerWidth / 2) - (this.props.width / 2) - OFFSET_HORIZONTAL_POS) * -1,
			right: (window.innerWidth / 2) - (this.props.width / 2) - OFFSET_HORIZONTAL_POS
		};
	}

	getBarColor() {
		return `header title-bar-${this.props.color}`;
	}

	getDialogClasses() {
		let classes = 'dialog dialog-react dialog-window';
		if (this.props.blockViewport) {
			classes = `${classes} blocking`;
		} else if (this.state.active) {
			classes = `${classes} active`;
		}

		return classes;
	}

	clickDialog(e) {
		this.setState({ active: false });
		if (this.container.contains(e.target)) {
			this.setState({ active: true });
		}
	}

	handleKeyUp(event) {
		if (this.props.shouldCloseOnEsc && event.keyCode === ESC_KEY) {
			event.stopPropagation();
			this.props.onClose();
		}
	}

	/**
	 * Render dialog.
	 *
	 * @return {Object} Rendered dialog.
	 */
	render() {
		return (
			<div className="dialog-container" style={this.getContainerStyle()}>
				<ViewportBlocker isActive={this.props.blockViewport} />
				<Draggable handle=".header" bounds={this.getMovementBoundaries()}>
					<div
						tabIndex={-1}
						onKeyUp={this.handleKeyUp}
						ref={(el) => { this.container = el; }}
						className={this.getDialogClasses()}
						style={this.getDefaultDimensions()}
					>
						<div className={this.getBarColor()}>
							<div className="text">{this.props.title}</div>
							<CloseButton onClose={this.props.onClose} />
						</div>
						<div className="content">
							{this.props.children}
						</div>
					</div>
				</Draggable>
			</div>
		);
	}
}

Dialog.defaultProps = {
	color: 'green',
	onDrag: () => null,
	onStop: () => null,
	onClose: null,
	blockViewport: false,
	getDimensions(dimensions) { return dimensions; },
	width: 300,
	height: 'auto',
	isOpen: true,
	containerStyle: {},
	dialogStyle: {},
	shouldCloseOnEsc: false
};

Dialog.propTypes = {
	children: PropTypes.node.isRequired,
	color: PropTypes.string.isRequired,
	blockViewport: PropTypes.bool.isRequired,
	title: PropTypes.string.isRequired,
	height: PropTypes.oneOfType([
		PropTypes.number,
		PropTypes.string
	]),
	width: PropTypes.oneOfType([
		PropTypes.number,
		PropTypes.string
	]),
	isOpen: PropTypes.bool,
	onClose: PropTypes.func,
	containerStyle: PropTypes.object,
	dialogStyle: PropTypes.object,
	getDimensions: PropTypes.func,
	shouldCloseOnEsc: PropTypes.bool
};

export default Dialog;
