import Backbone from './BackboneAdapter';

function isDefined(val) {
	return val !== undefined && val !== null;
}

function isModel(val) {
	return (val instanceof Backbone.Model);
}

function isCollection(val) {
	return (val instanceof Backbone.Collection);
}

function validateModel(isRequired, props, propName, componentName) {
	if (isDefined(props[propName]) && !isModel(props[propName])) {
		const type = typeof props[propName];
		return new Error(`Invalid prop '${propName}' of type '${type}' suplied to '${componentName}', expected instanceof Backbone.Model`);
	}
	return null;
}

function validateCollection(isRequired, props, propName, componentName) {
	if (isDefined(props[propName]) && !isCollection(props[propName])) {
		const type = typeof props[propName];
		return new Error(`Invalid prop '${propName}' of type '${type}' suplied to '${componentName}', expected instanceof Backbone.Collection`);
	}
	return null;
}

function createBackboneTypeChecker(type) {
	let v;
	if (type === 'collection') {
		v = validateCollection.bind(null, false);
		v.isRequired = validateCollection.bind(null, true);
	} else if (type === 'model') {
		v = validateModel.bind(null, false);
		v.isRequired = validateModel.bind(null, true);
	}
	return v;
}

export default {

	model: createBackboneTypeChecker('model'),
	collection: createBackboneTypeChecker('collection')

};
