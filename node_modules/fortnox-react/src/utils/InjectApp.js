
import devdebug from './DevDebug';
import Bootstrap from "./Bootstrap";

const PRODUCTION = (process.env.NODE_ENV === 'production');
const locale = process.env.TRANS_LOCALE;

let brandingPromises;

if (typeof BRANDINGS !== 'undefined') {
	/*
	 This can/should be injected via webpacks DefinePlugin. Check the
	 frontend-branding repo for a helper function that you
	 can use in your webpack config.
	 To see a configuration which loads available brandings this
	 way, take a look at the fortnox-react-template repo.
	 */
	brandingPromises = {};
	BRANDINGS.forEach(branding => { // eslint-disable-line no-undef
		// https://webpack.js.org/api/module-methods/#import-
		import( /* webpackMode: "eager" */ 'frontend-branding/' + branding + '/' + branding  + '.config.less')
			.then(brandingUrl => {
				brandingPromises[`${branding}-css`] = Promise.resolve(brandingUrl);
			})
			.catch(() => {
				devdebug(`BRANDINGS-CSS contained value "${branding}" which could not be resolved at runtime. Using the default "fortnox" branding css.`);
			});

		import( /* webpackMode: "eager" */ 'frontend-branding/' + branding + '/' + branding + '.config.js')
			.then(brandingUrl => {
				brandingPromises[`${branding}-js`] = Promise.resolve(brandingUrl);
			})
			.catch(() => {
				devdebug(`BRANDINGS-JS contained value "${branding}" which could not be resolved at runtime. Using the default "fortnox" branding js.`);
			});
	});
}

/*
 * boot.js always needs to exist as a scripttag in the index.html file of your project.
 * Webpack should be configured to generate a separate chunk (boot.js)
 * from this file in the framework. This is what dynamically detects any
 * branding and language specific for the user logging in. It creates and inserts
 * the necessary scripttag and link/style pointing to these files so that the
 * application can launch.
 *
 * Examples of generated script urls:
 * generates ---> https://<cdn-domain>/hash/build/app.se.js (Default language)
 * generates ---> https://<cdn-domain>/hash/build/app.se.js (systemLanguage property in user object set to "se")
 * generates ---> https://<cdn-domain>/hash/build/app.en.js (systemLanguage property in user object set to "en")
 *
 * Examples of generated link/style urls (hrefs):
 * generates ---> https://<cdn-domain>/hash/build/<branding>.css
 *
 * The deployscript generates a unique hash for the deploy which is
 * part of the absolute url of the initial
 * boot.js script, we simply use the same url here when loading the correct app/language file.
 *
 */
(function inject() {
	const scriptElement = document.createElement('script');
	const configElement = document.createElement('script');
	const styleElement = document.createElement('link');
	// Extract a basepath and an application name from the boot script so
	// that we can later use it to build our app and css URLs.
	// The basepath is important since deployscripts modify paths to
	// match CDN rules.
	const matches = document.head.querySelector('script').src.match(/(.*)\/build\/(.*)-boot.js$/);
	const basePath = matches[1];
	const applicationName = matches[2];

	function setupBranding(user) {
			const language = PRODUCTION ? (user.locale || 'sv_SE') : locale;
			scriptElement.src = `${basePath}/build/${applicationName}.${language}.js`;
			/*
			 A falsy value indicates that branding isn't explicitly set on the user. Here
			 we interpret that as wanting to have the "fortnox" branding.
			 */
			let branding = user.branding || 'fortnox';
			if(!brandingPromises) { // Branding is unavailable
				devdebug("Branding support not available, see injectapp.js in fortnox-react.");
				document.head.appendChild(scriptElement);
				return;
			}
			let brandingPromiseCss = brandingPromises[`${branding}-css`];
			let brandingPromiseJs = brandingPromises[`${branding}-js`];
			configElement.src = `${basePath}/build/config.${branding}.js`;
			if(!brandingPromiseCss) {
				devdebug(`Branding css "${branding}" was not available when compiling, using fallback "fortnox".`);
				brandingPromiseCss = brandingPromises['fortnox-css'];
				branding = 'fortnox';
			}
			if(!brandingPromiseJs) {
				devdebug(`Branding js "${branding}" was not available when compiling, using fallback "fortnox".`);
				brandingPromiseJs = brandingPromises['fortnox-js'];
				configElement.src = `${basePath}/build/config.fortnox.js`;
			}
			brandingPromiseCss
				.then(() => {
					styleElement.setAttribute('rel', 'stylesheet');
					// When running under helium the branding url for some
					// reason does not include the "build/" portion of the
					// path, so for now we're doing it like this.
					styleElement.href = `${basePath}/build/${applicationName}.${branding}.css`;

					document.head.appendChild(styleElement);
					document.head.appendChild(configElement);
					document.head.appendChild(scriptElement);
				});
	}

	Bootstrap.loadData()
		.then(setupBranding);

}());
