import React from 'react';
import { t as gettext } from 'c-3po';

import Backbone from './BackboneAdapter';
import customPropTypes from './PropValidation.js';
import PropTypes from 'prop-types';

const ReportsCollection = Backbone.Collection.extend({
	url: '/api/reports/reports-v1'
});

class Reports extends React.Component {
	constructor(props) {
		super(props);
		this.state = {
			reportCount: 0,
			fetched: false,
			firstFetched: false
		};
		this.ctxRequestOpenDialog = this.requestOpenDialog.bind(this);
	}

	componentDidMount() {
		this.fetchReports(false);
	}

	requestOpenDialog() {
		this.fetchReports(true);
	}

	fetchReports(openDialog) {
		if (this.state.fetched && openDialog) {
			window.parent.postMessage({ type: 'open-reports-v1' }, '*');
			return;
		}
		const promise = new Promise((resolve, reject) => {
			this.props.collection
				.fetch()
				.then(() => {
					resolve();
				})
				.catch(() => {
					reject();
				});
		});

		promise
			.then(() => {
				this.setState({
					reportCount: this.props.collection.size(),
					fetched: true
				});
				if (openDialog && this.props.collection.size() > 0) {
					window.parent.postMessage({ type: 'open-reports-v1' }, '*');
				}
			})
			.catch(() => {
				if (this.state.firstFetched) {
					this.props.eventbus.trigger('message:action', gettext`Rapporter är för närvarande inte tillgängliga. Försök igen senare.`, 'info', 5000);
				}
				this.setState({
					reportCount: 0,
					firstFetched: true
				});
			});
	}

	render() {
		if (this.state.fetched && this.state.reportCount === 0) {
			return null;
		}
		return (
			<a onClick={this.ctxRequestOpenDialog}>{ gettext`Rapporter` }</a>
		);
	}
}

Reports.defaultProps = {
	collection: new ReportsCollection()
};

Reports.propTypes = {
	collection: customPropTypes.collection.isRequired,
	eventbus: PropTypes.object.isRequired
};

export default Reports;
