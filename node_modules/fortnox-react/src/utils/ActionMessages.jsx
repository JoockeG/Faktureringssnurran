import React from 'react';
import PropTypes from 'prop-types';
import _ from 'underscore';
import ActionMessage from './ActionMessage';
import Backbone from './BackboneAdapter';
import MessageQueue from './ActionMessageQueue';
import customPropTypes from './PropValidation';

/**
 * ActionMessages Collection
 * Contains all message to be rendered
 *
 * @class
 * @name ActionMessages
 *
 * @return {ActionMessages} An instance of the ActionMessages collection.
 */
class ActionMessages extends React.Component {
	/**
	 * @memberOf ActionMessages
	 * @private
	 *
	 * @description
	 * Setup event listeners when the component is mounted
	 *
	 * @returns {undefined}
	 */
	componentDidMount() {
		this.props.messages.on('remove add', this.forceUpdate.bind(this, null));
	}

	/**
	 * @memberOf ActionMessages
	 * @private
	 *
	 * @description
	 * Cleanu up event listeners whenever we unmount the component
	 *
	 * @returns {undefined}
	 */
	componentWillUnmount() {
		this.props.messages.off('remove add', this.forceUpdate.bind(this, null));
	}

	/**
	 * @memberOf ActionMessages
	 * @private
	 *
	 * @description
	 * Map message type to css class, see props.type
	 *
	 * @param {String} type
	 *
	 * @returns {String}
	 */
	getMessageClassByType(type) {
		return this.props.types[type];
	}

	/**
	 * @memberOf ActionMessages
	 * @private
	 *
	 * @description
	 * Calculate the next bottom position for each message added.
	 *
	 * @param {Backbone.Model} message
	 *
	 * @returns {undefined}
	 */
	getNextBottomPosition(message) {
		const offset = this.props.messages.indexOf(message) === 0 ? 0 : 50;
		return this.props.messages.indexOf(message) * offset;
	}

	/**
	 * @memberOf ActionMessages
	 * @private
	 *
	 * @description
	 * Remove the model of the message from the collection when closing.
	 *
	 * @param {Backbone.Model} model
	 *
	 * @returns {undefined}
	 */
	onUserClose(model) {
		this.props.messages.remove(model);
	}

	/**
	 * @memberOf ActionMessages
	 * @private
	 *
	 * @description
	 * Return a list of all current messages
	 *
	 * @param {Backbone.Model} message
	 *
	 * @returns {undefined}
	 */
	getMessages() {
		return this.props.messages.map(message => (
			<ActionMessage
				posBottom={this.getNextBottomPosition(message)}
				key={message.cid}
				model={message}
				onUserClose={this.onUserClose.bind(this)}
				type={this.getMessageClassByType(message.get('type'))}
				text={message.get('msg')}
			/>
		), this);
	}

	/**
	 * @memberOf ActionMessages
	 * @private
	 *
	 * @description
	 * Render the list of messages
	 *
	 * @return {Object} React internals
	 *
	 */
	render() {
		return (
			<div className="messages">
				{this.getMessages()}
			</div>
		);
	}

}

/**
 * @memberOf ActionMessages
 * @private
 *
 * @description
 * The messages collection, offset distance,
 * and error type mapping. These error types are mapped to css classed used on
 * the html nodes. Note that you HAVE to supply an eventbus if you wish to share
 * events with this component.
 *
 */
ActionMessages.defaultProps = {
	messageOffset: 50,
	messages: new MessageQueue([], { eventBus: _.extend({}, Backbone.Events) }),
	types: {
		error: { icon: 'fa fa-exclamation-circle message-icon', color: 'message-type-error' },
		confirm: { icon: 'fa fa-check-circle message-icon', color: 'message-type-confirm' },
		info: { icon: 'fa fa-info-circle message-icon', color: 'message-type-info' }
	}
};

ActionMessages.propTypes = {
	messages: customPropTypes.collection,
	types: PropTypes.object
};

export default ActionMessages;
