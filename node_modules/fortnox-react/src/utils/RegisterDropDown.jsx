import React from 'react';
import customPropTypes from './PropValidation';
import DropDown from './DropDown';
import { t as gettext } from 'c-3po';
import Backbone from './BackboneAdapter';
import shortid from 'shortid';
import PropTypes from 'prop-types';

const RegisterModel = Backbone.Model.extend({
	defaults: {
		code: null,
		url: null,
		label: '',
		titles: {}
	},
	parse(register) {
		const currentUser = JSON.parse(sessionStorage.getItem('currentUser'));
		const locale = currentUser.locale;

		register.label = register.titles.sv_SE;
		if (register.titles[locale]) {
			register.label = register.titles[locale];
		}
		return register;
	}
});

const RegisterCollection = Backbone.Collection.extend({
	url: '/api/reports/registers-v2',
	model: RegisterModel,
	comparator: 'label'
});


class RegisterDropDown extends React.Component {
	constructor(props) {
		super(props);
		this.state = {
			registers: null,
			fetched: false,
			firstFetchMade: false
		};
		this.ctxFetchRegisters = this.fetchRegisters.bind(this);
	}

	componentDidMount() {
		this.fetchRegisters();
	}

	navigateToRegister(register) {
		window.parent.postMessage({
			type: 'navigate-v1',
			route: register.url
		}, '*');
	}

	fetchRegisters() {
		if (this.state.fetched) {
			return;
		}

		const promise = new Promise((resolve, reject) => {
			if (this.state.registers !== null) {
				resolve();
				return;
			}
			this.props.collection
				.fetch()
				.then(() => {
					resolve();
				})
				.catch(() => {
					reject();
				});
		});

		promise
			.then(() => {
				this.setState({
					registers: this.props.collection.toJSON(),
					fetched: true,
					firstFetchMade: true
				});
			})
			.catch(() => {
				if (this.dropdown) {
					this.dropdown.setState({ isVisible: false });
				}

				if (this.state.firstFetchMade) {
					this.props.eventbus.trigger(
						'message:action',
						gettext`Register är för närvarande inte tillgängliga. Försök igen senare.`,
						'info',
						5000
					);
				}

				this.setState({
					registers: null,
					firstFetchMade: true
				});
			});
	}

	getRegisterItems() {
		if (!this.state.fetched) {
			return null;
		}
		return this.state.registers.map(register => (
			<li key={shortid.generate()}>
				<a onClick={this.navigateToRegister.bind(this, register)}>{register.label}</a>
			</li>
		));
	}

	render() {
		if (this.state.registers && this.state.registers.length <= 0) {
			return null;
		}
		return (
			<DropDown
				ref={(el) => {
					this.dropdown = el;
				}}
				title="Register"
				arrow
				className="register"
				onMouseDown={this.ctxFetchRegisters}
			>
				{this.getRegisterItems()}
			</DropDown>
		);
	}
}

RegisterDropDown.defaultProps = {
	collection: new RegisterCollection()
};

RegisterDropDown.propTypes = {
	collection: customPropTypes.collection,
	eventbus: PropTypes.object.isRequired
};

export default RegisterDropDown;
