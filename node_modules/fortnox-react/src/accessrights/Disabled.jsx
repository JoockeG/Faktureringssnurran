import React, { Fragment } from 'react';
import PropTypes from 'prop-types';
import accessRightsDecorator from './Decorator';

class AccessDisabled extends React.Component {
	componentDidMount() {
		this.props.assertAccessState(this.props.assert);
	}

	getContent() {
		return React.Children.map(this.props.children, (child) => {
			if (!React.isValidElement(child)) {
				return child;
			}
			return React.cloneElement(child, {
				disabled: this.isDisabled(child)
			});
		});
	}

	isDisabled(child) {
		return !this.props.assertion || child.props.disabled;
	}

	render() {
		return <Fragment>{this.getContent()}</Fragment>;
	}
}

AccessDisabled.propTypes = {
	assert: PropTypes.oneOfType([
		PropTypes.func,
		PropTypes.array,
		PropTypes.string,
		PropTypes.instanceOf(Promise)
	]).isRequired,
	assertion: PropTypes.bool.isRequired,
	assertAccessState: PropTypes.func.isRequired,
	children: PropTypes.node
};

AccessDisabled.defaultProps = {
	assert() { return false; },
	children: null
};

export default accessRightsDecorator(AccessDisabled);
