import React from 'react';
import PropTypes from 'prop-types';
import fetchRights from '../setup/FetchRights';
import getAccessAssertionStrategy from './AssertionStrategies';

const decorate = (ComposedRights) => {
	class RightsDecorator extends React.Component {
		constructor(props) {
			super(props);
			this.state = {
				isLoaded: false,
				assertion: false,
				error: false
			};
		}

		/**
		 * Contrary to what you may think, the fetchRights promise will only be "executed"
		 * once, but resolved multiple times. We end up just doing a fetch once, but the
		 * promise is then passed around to different components and if it has been fetched
		 * already its immediately resolved.
		 *
		 * @returns {void}
		 */
		componentDidMount() {
			fetchRights.then((rights) => {
				this.rights = rights;
				this.setState({ isLoaded: true });
			})
				.catch(() => {
					this.setState({ error: true });
				});
		}

		/**
		 * State will be updated with the result from an assertion strategy.
		 * See (AccessRights/asseretion_strategies.js) for the available ones.
		 *
		 * @param {Boolean} result
		 * @returns {void}
		 */
		setAssertedState(result) {
			this.setState({ assertion: result });
		}

		/**
		 * Pick one of several assertion strategies. These differ depending
		 * on the type of assert. Asynchronous (Promise), String, Array or Function.
		 *
		 * @returns {void}
		 */
		assertAccessState() {
			const strategy = getAccessAssertionStrategy(this.props.assert);
			strategy.call(this);
		}

		render() {
			if (!this.state.isLoaded || this.state.error) {
				return null;
			}
			return (
				<ComposedRights
					{...this.props}
					assertAccessState={this.assertAccessState.bind(this)}
					assertion={this.state.assertion}
				>
					{this.props.children}
				</ComposedRights>
			);
		}
	}

	RightsDecorator.propTypes = {
		children: PropTypes.node.isRequired,
		assert: PropTypes.oneOfType([
			PropTypes.string,
			PropTypes.func,
			PropTypes.object,
			PropTypes.array
		]).isRequired
	};

	return RightsDecorator;
};


export default decorate;
