import React, { Fragment } from 'react';
import PropTypes from 'prop-types';
import accessRightsDecorator from './Decorator';

class AccessHidden extends React.Component {
	componentDidMount() {
		this.props.assertAccessState(this.props.assert);
	}

	isContentHidden() {
		return !this.props.assertion;
	}

	render() {
		if (this.isContentHidden()) {
			return null;
		}
		if (React.Children.count(this.props.children) <= 1) {
			return this.props.children;
		}
		return <Fragment>{this.props.children}</Fragment>;
	}
}

AccessHidden.propTypes = {
	assert: PropTypes.oneOfType([
		PropTypes.func,
		PropTypes.array,
		PropTypes.string,
		PropTypes.instanceOf(Promise)
	]).isRequired,
	children: PropTypes.node.isRequired,
	assertion: PropTypes.bool.isRequired,
	assertAccessState: PropTypes.func.isRequired
};

AccessHidden.defaultProps = {
	assert() { return false; },
	children: null
};

export default accessRightsDecorator(AccessHidden);
