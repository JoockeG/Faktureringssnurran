import React from 'react';
import PropTypes from 'prop-types';
import { t as gettext } from 'c-3po';
import AutocompleteTableRow from './Row';
import customPropTypes from '../utils/PropValidation';

/**
 * Small stateless functional component for rendering a
 * Row with a simple message using a Cell that spans all columns
 * @param  {Object} props
 * @return {Object} React Elements
 */
const RowMessage = props => (
	<tr className="row-message">
		<td colSpan={999}>{props.children}</td>
	</tr>
);

RowMessage.propTypes = {
	children: PropTypes.node.isRequired
};


class AutocompleteTableBody extends React.Component {

	/**
	 * @memberOf AutocompleteTableBody
	 * @private
	 *
	 * @description
	 * Determine wether there are any rows or not.
	 *
	 * @return {Boolean}
	 *
	 */
	hasRows() {
		return this.props.collection.length > 0;
	}

	/**
	 * @memberOf AutocompleteTableBody
	 * @private
	 *
	 * @description
	 * Render the no result message
	 *
	 * @return {Object} React Elements
	 *
	 */
	getNoResultsMessage() {
		return <RowMessage>{gettext`Inga sökresultat hittades.`}</RowMessage>;
	}

	/**
	 * @memberOf AutocompleteTableBody
	 * @private
	 *
	 * @description
	 * If there are more results what can be rendered by maxResults prop,
	 * we'll show a message telling the user to enrich their search query
	 *
	 * @return {Object} React Elements
	 *
	 */
	getMoreResultsMessage() {
		if (!this.hasMoreThanMax()) { return null; }
		return <RowMessage key={'nores'}>{gettext`Fler sökresultat finns. Förfina din sökning.`}</RowMessage>;
	}

	/**
	 * @memberOf AutocompleteTableBody
	 * @private
	 *
	 * @description
	 * Get a subset of the results, limited by whatever maxResults is set to
	 *
	 * @return {Array}
	 *
	 */
	getResults() {
		return this.props.collection.slice(0, this.props.maxResults);
	}

	/**
	 * @memberOf AutocompleteTableBody
	 * @private
	 *
	 * @description
	 * Determine wether there are more results than what we allow by maxResults
	 *
	 * @return {Boolean}
	 *
	 */
	hasMoreThanMax() {
		return this.props.collection.length > this.props.maxResults;
	}


	/**
	 * @memberOf AutocompleteTableBody
	 * @private
	 *
	 * @description
	 * Get current rows
	 *
	 * @return {Array}
	 */
	getRows() {
		return this.getResults().map((model, rowIndex) => <AutocompleteTableRow
			key={`${model.cid}row`}
			setSelected={this.props.setSelected}
			onMouseOverRow={this.props.onMouseOverRow}
			isActive={rowIndex === this.props.activeRowIndex}
			rowIndex={rowIndex}
			model={model}
		>{this.props.children}</AutocompleteTableRow>).concat(this.getMoreResultsMessage());
	}

	/**
	 * @memberOf AutocompleteTableBody
	 * @private
	 *
	 * @description
	 * Render the rows if there are any, otherwise render a message
	 * indicating that there is no result of the search.
	 *
	 * @return {Object} React Elements
	 *
	 */
	renderRows() {
		return this.hasRows() ? this.getRows() : this.getNoResultsMessage();
	}

	/**
	 * @memberOf AutocompleteTableBody
	 * @private
	 *
	 * @description
	 * Render table body
	 *
	 * @return {Object}
	 *
	 */
	render() {
		return (
			<tbody>{this.renderRows()}</tbody>
		);
	}

}

AutocompleteTableBody.propTypes = {
	collection: customPropTypes.collection.isRequired,
	setSelected: PropTypes.func.isRequired,
	onMouseOverRow: PropTypes.func.isRequired,
	activeRowIndex: PropTypes.number.isRequired,
	maxResults: PropTypes.number.isRequired,
	children: PropTypes.node.isRequired
};

export default AutocompleteTableBody;
