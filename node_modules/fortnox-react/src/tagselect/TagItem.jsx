import React from 'react';
import PropTypes from 'prop-types';

class TagItem extends React.Component {

	/**
	 * @memberOf TagItem
	 * @private
	 *
	 * @description
	 * When the tag mounts, report the offsetWidth of the Container to
	 * the parent so that we can figure out how many tags will fit in
	 * the available space in the end.
	 *
	 * @returns {undefined}
	 */
	componentDidMount() {
		this.props.setTagWidth(this.props.tagIndex, this.item.offsetWidth);
	}

	/**
	 * @memberOf TagItem
	 * @private
	 *
	 * @description
	 * Remove the tag when clicking on the X
	 *
	 * @returns {undefined}
	 */
	handleRemove() {
		this.props.onUserRemoveTag(this.props.tagIndex);
	}

	/**
	 * @memberOf TagItem
	 * @private
	 *
	 * @description
	 * Generate css styles
	 *
	 * @return {Object}
	 */
	getStyle() {
		return {
			maxWidth: this.props.maxWidth
		};
	}

	/**
	 * @memberOf TagItem
	 * @private
	 *
	 * @description
	 * Render the tag
	 *
	 * @return {Object}
	 */
	render() {
		return (
			<div
				className={`tag-item${this.props.disabled ? ' tag-item-disabled' : ''}`}
				ref={(el) => { this.item = el; }}
				style={this.getStyle()}
			>
				{this.props.item}<i
					className="fa fa-close"
					onClick={!this.props.disabled ? this.handleRemove.bind(this) : null}
				/>
			</div>
		);
	}
}

TagItem.defaultProps = {
	maxWidth: 100,
	disabled: false
};

TagItem.propTypes = {
	maxWidth: PropTypes.number,
	setTagWidth: PropTypes.func.isRequired,
	onUserRemoveTag: PropTypes.func.isRequired,
	tagIndex: PropTypes.number.isRequired,
	item: PropTypes.string.isRequired,
	disabled: PropTypes.bool
};

export default TagItem;
