import React from 'react';
import PropTypes from 'prop-types';
import Popover from '../popover/Popover';
import PopoverContent from '../popover/Content';

class PopoverTag extends React.Component {

	/**
	 * @memberOf PopoverTag
	 * @private
	 *
	 * @description
	 * Remove the tag via popver
	 *
	 * @returns {undefined}
	 */
	handleRemove() {
		this.props.onUserRemoveTag(this.props.tagIndex);
	}

	/**
	 * @memberOf PopoverTag
	 * @private
	 *
	 * @description
	 * Render tag in Popover
	 *
	 * @return {Object}
	 */
	render() {
		return (
			<li>{this.props.tagTitle}
				{!this.props.disabled &&
					<i className="fa fa-close" onClick={this.handleRemove.bind(this)} />}
			</li>
		);
	}

}

PopoverTag.defaultProps = {
	disabled: false
};

PopoverTag.propTypes = {
	tagTitle: PropTypes.string.isRequired,
	onUserRemoveTag: PropTypes.func.isRequired,
	tagIndex: PropTypes.number.isRequired,
	disabled: PropTypes.bool
};


class HiddenTags extends React.Component {

	/**
	 * @memberOf HiddenTags
	 * @private
	 *
	 * @description
	 * Bind the handleScroll to this context so that we can keep
	 * a reference to that method, used to remove/add listeners
	 *
	 * @param {Object} props
	 *
	 * @returns {undefined}
	 */
	constructor(props) {
		super(props);
		this.ctxHandleScroll = this.handleScroll.bind(this);
	}

	/**
	 * @memberOf HiddenTags
	 * @private
	 *
	 * @description
	 * Add a mousewheel event listener to help prevent scrolling in parent
	 *
	 * @returns {undefined}
	 */
	componentDidMount() {
		this.ul.addEventListener('wheel', this.ctxHandleScroll, false);
	}

	/**
	 * @memberOf HiddenTags
	 * @private
	 *
	 * @description
	 * Remove the mousewheel event listener whenever the component is unmounted
	 *
	 * @returns {undefined}
	 */
	componentWillUnmount() {
		this.ul.removeEventListener('wheel', this.ctxHandleScroll, false);
	}

	/**
	 * @memberOf HiddenTags
	 * @private
	 *
	 * @description
	 * Cancel eventpropagation and prevent default behavior
	 *
	 * @param {SyntheticEvent} e
	 *
	 * @returns {Boolean}
	 */
	cancelScrollEvent(e) {
		e.stopImmediatePropagation();
		e.preventDefault();
		e.returnValue = false;
		return false;
	}

	/**
	 * @memberOf HiddenTags
	 * @private
	 *
	 * @description
	 * Scroll handler for mousewheel event. Determines if we should
	 * cancel event bubbling to prevent the whole page of scrolling when
	 * scrolling outside the bounding box of the <ul>, ie when reaching
	 * the top or bottom the page would have continued scrolling.
	 *
	 * @param {SyntheticEvent} e
	 *
	 * @returns {Boolean}
	 */
	handleScroll(e) {
		const elem = this.ul;
		const scrollTop = elem.scrollTop;
		const scrollHeight = elem.scrollHeight;
		const height = elem.clientHeight;
		const wheelDelta = e.deltaY;
		const isDeltaPositive = wheelDelta > 0;

		if (isDeltaPositive && wheelDelta > scrollHeight - height - scrollTop) {
			elem.scrollTop = scrollHeight;
			return this.cancelScrollEvent(e);
		} else if (!isDeltaPositive && -wheelDelta > scrollTop) {
			elem.scrollTop = 0;
			return this.cancelScrollEvent(e);
		}
		return null;
	}

	/**
	 * @memberOf HiddenTags
	 * @private
	 *
	 * @description
	 * Generate styles of the Hidden tags Container
	 *
	 * @returns {Object}
	 */
	getStyle() {
		return {
			display: this.props.isVisible ? 'block' : 'none',
			width: 55,
			marginLeft: 5,
			color: '#4E81F2',
			cursor: 'pointer'
		};
	}

	/**
	 * @memberOf HiddenTags
	 * @private
	 *
	 * @description
	 * Get all tags for rendering inside of
	 * the Popover Content box.
	 *
	 * @return {Array}
	 */
	getTags() {
		return this.props.tags.map((tag, index) => <PopoverTag
			onUserRemoveTag={this.props.onUserRemoveTag}
			key={`tag${index}`}
			tagTitle={tag.tagTitle}
			tagIndex={index}
			disabled={this.props.disabled}
		/>);
	}

	/**
	 * @memberOf HiddenTags
	 * @private
	 *
	 * @description
	 * Render Hidden tags text/Button/Popover
	 *
	 * @return {Object}
	 */
	render() {
		return (
			<Popover>
				<div style={this.getStyle()}>{this.props.linkText}</div>
				<PopoverContent>
					<ul
						style={{ maxHeight: this.props.maxPopoverHeight }}
						ref={(el) => { this.ul = el; }}
					>
						{this.getTags()}
					</ul>
				</PopoverContent>
			</Popover>
		);
	}

}

HiddenTags.defaultProps = {
	maxPopoverHeight: 300,
	isVisible: false,
	disabled: false
};

HiddenTags.propTypes = {
	isVisible: PropTypes.bool,
	tags: PropTypes.array.isRequired,
	onUserRemoveTag: PropTypes.func.isRequired,
	linkText: PropTypes.string.isRequired,
	maxPopoverHeight: PropTypes.number.isRequired,
	disabled: PropTypes.bool
};

export default HiddenTags;
