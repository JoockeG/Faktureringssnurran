import React from 'react';
import PropTypes from 'prop-types';
import ExpanderContent from './ExpanderContent';

/**
 * The React form.Expander Component
 * Renders expanders inside formviews.
 *
 * @class
 * @name Expander
 *
 * @return {Expander} An instance of the form.Expander component.
 */
class Expander extends React.Component {
	constructor(props) {
		super(props);
		this.state = {
			isExpanded: false
		};
	}

	/**
	 * @private
	 * @memberOf Expander
	 *
	 * @description
	 * Only rerender if props or state changes
	 *
	 * @param {Object} nextProps
	 * @param {Object} nextState
	 *
	 * @return {Boolean}
	 */
	shouldComponentUpdate(nextProps, nextState) {
		return this.props !== nextProps || this.state !== nextState;
	}

	/**
	 * @private
	 * @memberOf Expander
	 *
	 * @description
	 *
	 * Set the new expanded state when the user clicks
	 *
	 * @return {undefined}
	 */
	handleClick() {
		const newState = {
			isExpanded: !this.state.isExpanded
		};
		this.props.onChange(newState.isExpanded);
		this.setState(newState);
	}

	/**
	 * @private
	 * @memberOf Expander
	 *
	 * @description
	 *
	 * Get the classes to be used in each render
	 *
	 * @return {String}
	 */
	getClasses() {
		return [
			'form-expander-control',
			'ft-pointer',
			this.state.isExpanded ? 'expanded' : ''
		].join(' ');
	}

	/**
	 * @private
	 * @memberOf Expander
	 *
	 * @description
	 *
	 * Render the expander Button and expander Content
	 *
	 * @return {Object} - React internals
	 */
	render() {
		return (
			<div>
				<button
					className={this.getClasses()}
					onClick={this.handleClick.bind(this)}
				>
					{this.props.title}
				</button>
				<ExpanderContent isExpanded={this.state.isExpanded}>
					{this.props.children}
				</ExpanderContent>
			</div>
		);
	}

}

Expander.defaultProps = {
	onChange() { return null; }
};

Expander.propTypes = {
	children: PropTypes.node.isRequired,
	onChange: PropTypes.func,
	title: PropTypes.string.isRequired
};


export default Expander;
