import React from 'react';
import PropTypes from 'prop-types';
import customPropTypes from '../utils/PropValidation';

/**
 * The React ToggleGroup component.
 *
 *
 * @class
 * @name ToggleGroup
 *
 * @return {ToggleGroup}
 */
class ToggleGroup extends React.Component {

	constructor(props) {
		super(props);
		this.state = {
			toggledValue: null
		};
	}

	/**
	 * @memberOf ToggleGroup
	 * @private
	 *
	 * @description
	 * When component exists in DOM, listen for changes on the model
	 *
	 * @returns {undefined}
	 */
	componentDidMount() {
		this.props.model.on(`change:${this.props.modelProp}`, this.handleModelChange, this);
		this.handleModelChange();
	}


	/**
	 * @memberOf ToggleGroup
	 * @private
	 *
	 * @description
	 * Determine if a rerender should occur
	 *
	 * @param {Object} nextProps
	 * @param {Object} nextState
	 *
	 * @return {Boolean}
	 */
	shouldComponentUpdate(nextProps, nextState) {
		return this.state !== nextState || this.props !== nextProps;
	}

	/**
	 * @memberOf ToggleGroup
	 * @private
	 *
	 * @description
	 * Clean up eventlisteners for "offline" components
	 *
	 * @returns {undefined}
	 */
	componentWillUnmount() {
		this.props.model.off(`change:${this.props.modelProp}`, this.handleModelChange, this);
	}

	/**
	 * @memberOf ToggleGroup
	 * @private
	 *
	 * @description
	 * Update state if the model changes
	 *
	 * @returns {undefined}
	 */
	handleModelChange() {
		this.setState({
			toggledValue: this.props.model.get(this.props.modelProp)
		});
	}

	/**
	 * @memberOf ToggleGroup
	 * @private
	 *
	 * @description
	 * Whenever the user clicks on a Toggle, update the state and the model
	 *
	 * @param {Mixed} value
	 *
	 * @returns {undefined}
	 */
	handleClick(value) {
		if (this.props.disabled) { return; }
		this.setState({
			toggledValue: value
		});
		this.props.onModelSync(this.props.model, this.props.modelProp, value);
	}

	/**
	 * @memberOf ToggleGroup
	 * @private
	 *
	 * @description
	 * Determine if state changed
	 *
	 * @param {Mixed} value
	 *
	 * @return {Boolean}
	 */
	hasMatchingValue(value) {
		return this.state.toggledValue === value;
	}


	/**
	 * @memberOf ToggleGroup
	 * @private
	 *
	 * @description
	 * Get a list of toggles based on the configuration in props
	 *
	 * @return {Array}
	 */
	getToggles() {
		return React.Children.map(this.props.children, child => React.cloneElement(child, {
			onClick: this.handleClick.bind(this),
			isToggled: this.hasMatchingValue(child.props.value),
			tooltip: child.props.tooltip,
			tooltipAlign: child.props.tooltipAlign
		}));
	}

	/**
	 * @memberOf ToggleGroup
	 * @private
	 *
	 * @description
	 * Generate list of css classes to be used.
	 *
	 * @return {String}
	 */
	getCSSClasses() {
		return [
			'button-group',
			this.props.disabled ? 'toggle-group-disabled' : ''
		].join(' ');
	}

	/**
	 * @memberOf ToggleGroup
	 * @private
	 *
	 * @description
	 * Render the component
	 *
	 * @return {Object} React Elements
	 */
	render() {
		return (
			<div className="field-container">
				<label>{this.props.title}</label>
				<div className={this.getCSSClasses()}>
					{this.getToggles()}
				</div>
			</div>
		);
	}

}

ToggleGroup.defaultProps = {
	onModelSync(model, modelProp, value) {
		return model.set(modelProp, value);
	},
	title: '',
	disabled: false
};

ToggleGroup.propTypes = {
	model: customPropTypes.model,
	modelProp: PropTypes.string,
	onModelSync: PropTypes.func.isRequired,
	title: PropTypes.string,
	disabled: PropTypes.bool.isRequired
};

export default ToggleGroup;
