import _ from 'underscore';
import React from 'react';
import { t as gettext } from 'c-3po';
import TextBox from './TextBox';
import isNumeric from '../validations/Numeric';

/**
 * The React FormFieldNumeric component.
 *
 *
 * @class
 * @name FormFieldNumeric
 *
 * @return {FormFieldNumeric} An instance of the FormFieldNumeric component.
 */
class FieldNumeric extends React.Component {

	/**
	 * @private
	 * @memberOf FormFieldNumeric
	 *
	 * @description
	 *
	 * Typeconvert/Typecast the value to an int/float depending on if we have
	 * decimals or not. This is the value that are synced to the model.
	 * If an empty string is presented which results in NaN, then set (null) on
	 * the model.
	 *
	 * @param {String|Number} value - input value
	 *
	 * @return {Number}
	 */
	typeCast(value) {
		const num = parseFloat(_.isNumber(value) ? value : value.replace(/\s/g, '').replace(/,/g, '.'));
		return isNaN(num) ? null : num;
	}

	/**
	 * @private
	 * @memberOf FormFieldNumeric
	 *
	 * @description
	 *
	 * Make sure we only allow digits here
	 *
	 * @param {String|null} value - input value
	 *
	 * @return {String|Boolean}
	 */
	validate(value) {
		return isNumeric(value) ? true : gettext`Fältet får endast innehålla siffror.`;
	}

	/**
	 * @private
	 * @memberOf FormFieldNumeric
	 *
	 * @description
	 *
	 * Convert value to string as representation in the input field.
	 * In the case where value is undefined, represent this with empty string.
	 *
	 * @param {Mixed} value
	 *
	 * @return {String|Boolean}
	 */
	format(value) {
		if (_.isString(value)) {
			return value;
		}
		return _.isNumber(value) ? value.toString() : '';
	}

	render() {
		return (
			<TextBox
				{...this.props}
				validate={this.validate.bind(this)}
				typeCast={this.typeCast}
			/>
		);
	}

}


export default FieldNumeric;
