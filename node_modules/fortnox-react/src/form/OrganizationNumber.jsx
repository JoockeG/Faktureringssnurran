import React from 'react';
import { t as gettext } from 'c-3po';
import TextBox from './TextBox';
import { isNotValidChars, isNotValidLength } from '../validations/OrganizationNumber';
import luhnCheck from '../validations/LuhnCheck';

/**
 * The React FormFieldOrganizationNumber component.
 *
 *
 * @class
 * @name FormFieldOrganizationNumber
 *
 * @return {FormFieldOrganizationNumber} An instance of the FormFieldOrganizationNumber component.
 */
class FieldOrganizationNumber extends React.Component {

	/**
	 * @private
	 * @memberOf FormFieldOrganizationNumber
	 *
	 * @description
	 * Convert to string, replace - dashes
	 *
	 * @param {String} value - input value
	 *
	 * @return {String}
	 */
	getCCNumber(value) {
		return (value || '').toString().replace(/[\-]/gi, '');
	}

	/**
	 * @private
	 * @memberOf FormFieldOrganizationNumber
	 *
	 * @description
	 * subString the value if needed
	 *
	 * @param {String} value - input value
	 *
	 * @return {String}
	 */
	subStringValue(value) {
		if (value.length === 12 && (value.substr(0, 2) === '19' || value.substr(0, 2) === '20')) {
			return value.substr(2);
		}
		return value;
	}

	/**
	 * @private
	 * @memberOf FormFieldOrganizationNumber
	 *
	 * @description
	 *
	 * Check if the value is a valid organizationNumber. The same validation is used
	 * for personal identity numbers in Sweden.
	 *
	 * For mor information see:
	 * http://en.wikipedia.org/wiki/Personal_identity_number_(Sweden)
	 * https://www.prv.se/en/Puffar/Organization-number/
	 *
	 * @param {String|null} value - input value
	 *
	 * @return {String|Boolean}
	 */
	validate(value) {
		const ccnumber = this.getCCNumber(value);
		const messages = [
			isNotValidChars(ccnumber) ? gettext`Org-/Personnumret inneh책ller andra tecken 채n 0-9 och -.` : null,
			isNotValidLength(ccnumber) ? gettext`${ccnumber} 채r inte ett giltigt org-/personnr.` : null,
			luhnCheck(this.subStringValue(ccnumber)) ? gettext`${ccnumber} 채r inte ett giltigt org-/personnr.` : null
		].filter(isValid => isValid);

		return messages.length > 0 ? messages[0] : true;
	}

	render() {
		return (
			<TextBox
				{...this.props}
				validate={this.validate.bind(this)}
			/>
		);
	}

}

export default FieldOrganizationNumber;
