import React from 'react';
import PropTypes from 'prop-types';
import customPropTypes from '../utils/PropValidation';

/**
 * The React RadioButton component.
 *
 *
 * @class
 * @name RadioButton
 *
 * @return {RadioButton} An instance of the RadioButton component.
 */
class RadioButton extends React.Component {

	/**
	 * @private
	 * @memberOf RadioButton
	 *
	 * @description
	 *
	 * Calls the parent change handler if the input
	 * field is not disabled.
	 *
	 * @return {undefined}
	 */
	handleUserChange() {
		if (this.props.disabled) { return null; }
		return this.props.onUserChange(this.props.value);
	}

	/**
	 * @private
	 * @memberOf RadioButton
	 *
	 * @description
	 *
	 * Renders a radiobutton
	 *
	 * @return {Object} - React internals
	 */
	render() {
		return (
			<span className="radio">
				<input
					type="radio"
					className="toggleradio"
					name={this.props.name}
					disabled={this.props.disabled}
					defaultChecked={this.props.defaultChecked}
					checked={this.props.checked}
					onChange={this.handleUserChange.bind(this)}
					value={this.props.value}
				/>
				<div>{this.props.title}</div>
			</span>
		);
	}

}

RadioButton.defaultProps = {
	disabled: false
};

RadioButton.propTypes = {
	name: PropTypes.string,
	disabled: PropTypes.bool,
	defaultChecked: PropTypes.bool,
	checked: PropTypes.bool,
	value: PropTypes.oneOfType([
		PropTypes.string,
		PropTypes.bool,
		PropTypes.number
	]),
	title: PropTypes.string,
	onUserChange: PropTypes.func
};


/**
 * The React FormToggleField component.
 *
 *
 * @class
 * @name FormToggleField
 *
 * @return {FormToggleField} An instance of the FormToggleField component.
 */
class FormToggleField extends React.Component {

	constructor(props) {
		super(props);
		this.state = {
			radioName: this.getName(),
			value: null
		};
	}

	/**
	 * @private
	 * @memberOf FormToggleField
	 *
	 * @description
	 *
	 * Listen for changes in the model, reflect these changes on the radio buttons
	 *
	 * @return {undefined}
	 */
	componentDidMount() {
		this.props.model.on(`change:${this.props.modelProp}`, this.handleModelChange, this);
	}

	/**
	 * @private
	 * @memberOf FormToggleField
	 *
	 * @description
	 *
	 * Clean up all event listeners before unmounting the component
	 *
	 * @return {undefined}
	 */
	componentWillUnmount() {
		this.props.model.off(`change:${this.props.modelProp}`, this.handleModelChange, this);
	}

	/**
	 * @private
	 * @memberOf FormToggleField
	 *
	 * @description
	 *
	 * Whenever the user makes a change by clicking on one of the buttons,
	 * update the state and the model value.
	 *
	 * @param {Mixed} value
	 *
	 * @return {undefined}
	 */
	onUserChange(value) {
		this.setState({ value });
		this.props.onModelSync(this.props.model, this.props.modelProp, value);
	}

	/**
	 * @private
	 * @memberOf FormToggleField
	 *
	 * @description
	 *
	 * Whenever the model property changes, update the state
	 *
	 * @return {undefined}
	 */
	handleModelChange() {
		this.setState({ value: this.props.model.get(this.props.modelProp) });
	}

	/**
	 * @private
	 * @memberOf FormToggleField
	 *
	 * @description
	 *
	 * Checks if a Button should be checked by comparing its original
	 * value to state and model value.
	 *
	 * @param {Object} button
	 *
	 * @return {Boolean}
	 */
	isChecked(button) {
		return button.value === (this.state.value || this.props.model.get(this.props.modelProp));
	}

	/**
	 * @private
	 * @memberOf FormToggleField
	 *
	 * @description
	 *
	 * Generate a unique name for the radiobuttons
	 *
	 * @return {String}
	 */
	getName() {
		const rnd = Math.floor(Math.random() + new Date().getTime());
		return this.props.model.cid + rnd;
	}

	/**
	 * @private
	 * @memberOf FormToggleField
	 *
	 * @description
	 *
	 * Generates a list of radiobuttons based on the configuration
	 *
	 * @return {Array}
	 */
	getRadioButtons() {
		return this.props.buttons.map((button, index) => <RadioButton
			disabled={this.props.disabled}
			title={button.caption}
			value={button.value}
			checked={this.isChecked(button)}
			onUserChange={this.onUserChange.bind(this)}
			key={`button${index}`}
		/>, this);
	}

	/**
	 * @private
	 * @memberOf FormToggleField
	 *
	 * @description
	 *
	 * Render the radiobuttons
	 *
	 * @return {Object} - React internals
	 */
	render() {
		return (
			<div>
				<label>{this.props.title}</label>
				{this.getRadioButtons()}
			</div>
		);
	}

}

FormToggleField.defaultProps = {
	onModelSync(model, modelProp, value) {
		return model.set(modelProp, value);
	}
};

FormToggleField.propTypes = {
	model: customPropTypes.model,
	onModelSync: PropTypes.func.isRequired,
	buttons: PropTypes.array.isRequired,
	modelProp: PropTypes.string,
	title: PropTypes.string,
	disabled: PropTypes.bool
};


export default FormToggleField;
