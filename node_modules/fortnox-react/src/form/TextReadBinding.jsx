import React from 'react';
import PropTypes from 'prop-types';
import customPropTypes from '../utils/PropValidation';

/**
 * The React TextReadBinding component.
 *
 * @class
 * @name TextReadBinding
 *
 * @return {TextReadBinding} An instance of the TextReadBinding component.
 */
class TextReadBinding extends React.Component {

	constructor(props) {
		super(props);
		this.state = {
			value: props.model.get(props.modelProp)
		};
	}

	/**
	 * @private
	 * @memberOf TextReadBinding
	 *
	 * @description
	 * Setup event listener, and sync initial value from the model
	 *
	 * @returns {undefined}
	 */
	componentDidMount() {
		this.props.model.on(`change:${this.props.modelProp}`, this.handleModelChange, this);
	}

	/**
	 * @private
	 * @memberOf TextReadBinding
	 *
	 * @description
	 * Determine if we have to rerender on update
	 *
	 * @param {Object} nextProps
	 * @param {Object} nextState
	 *
	 * @returns {Boolean}
	 */
	shouldComponentUpdate(nextProps, nextState) {
		return this.state.value !== nextState.value;
	}

	/**
	 * @private
	 * @memberOf TextReadBinding
	 *
	 * @description
	 * Remove event listener
	 *
	 * @returns {undefined}
	 */
	componentWillUnmount() {
		this.props.model.off(`change:${this.props.modelProp}`, this.handleModelChange, this);
	}

	/**
	 * @private
	 * @memberOf TextReadBinding
	 *
	 * @description
	 * Return the value, use a formatter if one was defined
	 * Undefined, null and false produces empty string
	 *
	 * @return {String}
	 */
	getValue() {
		const value = this.state.value;
		if (this.props.hasOwnProperty('format')) {
			return this.props.format(value);
		}
		return value || '';
	}


	/**
	 * @private
	 * @memberOf TextReadBinding
	 *
	 * @description
	 * When the model property we listen to changes, set new state
	 *
	 * @returns {undefined}
	 */
	handleModelChange() {
		this.setState({
			value: this.props.model.get(this.props.modelProp)
		});
	}

	/**
	 * @private
	 * @memberOf TextReadBinding
	 *
	 * @description
	 * When the model property we listen to changes, set new state
	 *
	 * @returns {String}
	 */
	getCSSClass() {
		return this.props.className ? this.props.className : '';
	}

	/**
	 * @private
	 * @memberOf TextReadBinding
	 *
	 * @description
	 * Render the span tag
	 *
	 * @returns {Object} React Elements
	 */
	render() {
		return (
			<span className={this.getCSSClass()}>{this.getValue()}</span>
		);
	}
}

TextReadBinding.propTypes = {
	model: customPropTypes.model,
	modelProp: PropTypes.string,
	className: PropTypes.string,
	format: PropTypes.func
};

export default TextReadBinding;
