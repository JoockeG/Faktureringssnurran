import React from 'react';
import PropTypes from 'prop-types';
import _ from 'underscore';
import accounting from 'accounting';
import TextBox from './TextBox';

/**
 * The React FormFieldMoney component.
 *
 *
 * @class
 * @name FormFieldMoney
 *
 * @return {FormFieldMoney} An instance of the FormFieldMoney component.
 */
class FieldMoney extends React.Component {

	/**
	 * @private
	 * @memberOf FormFieldMoney
	 *
	 * @description
	 *
	 * Typeconvert/Typecast the value to an int/float depending on if we have
	 * decimals or not. This is the value that are synced to the model.
	 *
	 * @param {String|Number} value - input value
	 *
	 * @return {Number}
	 */
	typeCast(value) {
		const num = parseFloat(_.isNumber(value) ? value : value.replace(/\s/g, '').replace(/,/g, '.'));
		return isNaN(num) ? 0 : num;
	}

	/**
	 * @private
	 * @memberOf FormFieldMoney
	 *
	 * @description
	 *
	 * Before displaying the value in the textfield, format it according to the
	 * given amount of decimals in money format, ie (100,00)
	 *
	 * @param {String} value - input value
	 *
	 * @return {String}
	 */
	format(value) {
		// accounting.formatMoney is not always accurate e.g. 1.005 becomes "1,00", this fixes that
		return accounting.formatMoney(value ? this.typeCast(value) : value, '', this.props.decimals, ' ', ',');
	}

	render() {
		return (
			<TextBox
				{...this.props}
				format={this.format.bind(this)}
				typeCast={this.typeCast}
			/>
		);
	}

}


FieldMoney.defaultProps = {
	decimals: 2
};

FieldMoney.propTypes = {
	decimals: PropTypes.number
};

export default FieldMoney;
