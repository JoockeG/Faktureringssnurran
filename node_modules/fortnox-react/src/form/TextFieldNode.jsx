import React from 'react';
import PropTypes from 'prop-types';
import _ from 'underscore';

/**
 * The React form.TextFieldNode component.
 *
 *
 * @class
 * @name TextFieldNode
 *
 * @return {TextFieldNode}
 */
class TextFieldNode extends React.Component {

	/**
	 * @private
	 * @memberOf TextFieldNode
	 *
	 * @description
	 *
	 * Determine we have any validation messages
	 *
	 * @return {Boolean}
	 *
	 */
	hasValidationMessages() {
		return this.props.messages.length > 0;
	}

	/**
	 * @private
	 * @memberOf TextFieldNode
	 *
	 * @description
	 *
	 * Determine if a tooltip was declared
	 *
	 * @return {Boolean}
	 *
	 */
	hasTooltip() {
		return this.hasValidationMessages() || this.props.tooltip !== null;
	}

	/**
	 * @private
	 * @memberOf TextFieldNode
	 *
	 * @description
	 *
	 * Handle the change event, call onUserInput received via props
	 *
	 * @return {undefined}
	 *
	 */
	handleChange(e) {
		this.props.onUserInput(e.target.value);
	}

	/**
	 * @private
	 * @memberOf TextFieldNode
	 *
	 * @description
	 *
	 * Handle the blur event, call on onUserBlur received via props
	 *
	 * @return {undefined}
	 *
	 */
	handleBlur(e) {
		this.props.onUserBlur(e.target.value);
	}

	/**
	 * @private
	 * @memberOf TextFieldNode
	 *
	 * @description
	 *
	 * Handle the key related events and call the corresponding callback
	 * received via props.
	 *
	 * @param {String} type
	 * @param {SyntheticEvent} e
	 *
	 * @return {undefined}
	 */
	handleKeyEvent(type, e) {
		if (this.props[type]) {
			this.props[type](e, this.textInput.value);
		}
	}

	/**
	 * @private
	 * @memberOf TextFieldNode
	 *
	 * @description
	 *
	 * Generate a list of classes to be used on the textfield
	 *
	 * @return {Array}
	 *
	 */
	getClasses() {
		return [
			this.props.className,
			'textfield',
			this.props.isValid ? '' : 'missing-invalid'
		].join(' ');
	}

	/**
	 * @private
	 * @memberOf TextFieldNode
	 *
	 * @description
	 *
	 * Get the tooltip align, default: top.
	 *
	 * @return {String}
	 *
	 */
	getTooltipAlign() {
		return `hint--${this.props.tooltipAlign}`;
	}

	/**
	 * @private
	 * @memberOf TextFieldNode
	 *
	 * @description
	 *
	 * Classes of validations and tooltips
	 *
	 * @return {String}
	 *
	 */
	getTooltipClasses() {
		return [
			this.hasTooltip() ? `hint ${this.getTooltipAlign()}` : '',
			this.hasValidationMessages() ? 'hint--always hint--error' : ''
		].join(' ');
	}

	/**
	 * @private
	 * @memberOf TextFieldNode
	 *
	 * @description
	 *
	 * String of the tooltip or validation messages
	 * Validation should triumph tooltip
	 *
	 * @return {String}
	 *
	 */
	getTooltip() {
		if (this.hasValidationMessages()) {
			return this.props.messages[0];
		}
		return this.props.tooltip;
	}

	/**
	 * @private
	 * @memberOf TextFieldNode
	 *
	 * @description
	 *
	 * Renders an input text field.
	 *
	 * @return {undefined}
	 *
	 */
	render() {
		return (
			<div
				className={this.getTooltipClasses()}
				data-hint={this.getTooltip()}
				style={{ position: 'relative' }}
			>
				<input
					type={this.props.type}
					className={this.getClasses()}
					ref={(el) => { this.textInput = el; }}
					value={this.props.value}
					onChange={this.handleChange.bind(this)}
					onBlur={this.handleBlur.bind(this)}
					onFocus={this.props.onUserFocus}
					onKeyDown={_.partial(this.handleKeyEvent, 'onKeyDown').bind(this)}
					onKeyPress={_.partial(this.handleKeyEvent, 'onKeyPress').bind(this)}
					onKeyUp={_.partial(this.handleKeyEvent, 'onKeyUp').bind(this)}
					maxLength={this.props.maxlength}
					disabled={this.props.disabled}
					placeholder={this.props.placeholder}
					autoFocus={this.props.autoFocus}
					autoComplete={this.props.autoComplete}
				/>
				{this.props.icon}
			</div>
		);
	}

}

TextFieldNode.defaultProps = {
	className: '',
	tooltip: null,
	tooltipAlign: 'top',
	type: 'text',
	value: '',
	autoComplete: null
};

TextFieldNode.propTypes = {
	messages: PropTypes.array,
	type: PropTypes.string,
	placeholder: PropTypes.string,
	tooltip: PropTypes.string,
	onUserInput: PropTypes.func,
	onUserBlur: PropTypes.func,
	className: PropTypes.string,
	isValid: PropTypes.bool,
	tooltipAlign: PropTypes.string,
	value: PropTypes.oneOfType([
		PropTypes.string,
		PropTypes.number
	]),
	maxlength: PropTypes.number,
	disabled: PropTypes.bool,
	autoFocus: PropTypes.bool,
	onUserFocus: PropTypes.func,
	icon: PropTypes.object,
	autoComplete: PropTypes.oneOf([
		'on',
		'off'
	])
};

export default TextFieldNode;
