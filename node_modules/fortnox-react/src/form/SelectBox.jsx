import React from 'react';
import PropTypes from 'prop-types';
import customPropTypes from '../utils/PropValidation';

/**
 * The React SelectBoxOption component.
 *
 *
 * @class
 * @name SelectBoxOption
 *
 * @return {SelectBoxOption} An instance of the SelectBoxOption component.
 */
const SelectBoxOption = props => (
	/**
	 * @private
	 * @memberOf SelectBoxOption
	 *
	 * @description
	 * Renders an option tag inside the select element
	 *
	 * @return {Node}
	 */
	<option value={props.value}>{props.caption}</option>
);


SelectBoxOption.propTypes = {
	caption: PropTypes.string.isRequired,
	value: PropTypes.oneOfType([
		PropTypes.string,
		PropTypes.number,
		PropTypes.bool
	]).isRequired
};


/**
 * The React SelectBox component.
 *
 *
 * @class
 * @name SelectBox
 *
 * @return {SelectBox} An instance of the SelectBox component.
 */
class SelectBox extends React.Component {

	constructor(props) {
		super(props);
		this.state = {
			value: ''
		};
	}

	/**
	 * @private
	 * @memberOf SelectBox
	 *
	 * @description
	 * Setup events, force update on certain collection events
	 *
	 * @returns {undefined}
	 */
	componentDidMount() {
		this.props.collection.on('reset sync change', this.shouldForceUpdate, this);
		this.shouldSetDefaultValue();
		this.props.model.on(`change:${this.props.modelProp}`, this.handleModelChange, this);
		this.props.collection.on('reset', this.shouldSetDefaultValue, this);
	}

	/**
	 * @private
	 * @memberOf SelectBox
	 *
	 * @description
	 * Supposedly set a default value for new props
	 *
	 * @return {undefined}
	 */
	componentWillReceiveProps() {
		this.shouldSetDefaultValue();
	}

	/**
	 * @private
	 * @memberOf SelectBox
	 *
	 * @description
	 * Cleanup events
	 *
	 * @returns {undeifned}
	 */
	componentWillUnmount() {
		this.props.collection.off('reset sync change', this.shouldForceUpdate, this);
		this.props.model.off(`change:${this.props.modelProp}`, this.handleModelChange, this);
		this.props.collection.off('reset', this.shouldSetDefaultValue, this);
	}

	/**
	 * @private
	 * @memberOf SelectBox
	 *
	 * @description
	 * If the model does not have an initial value, then set the first choice in
	 * the collection. Everything except undefined and null count as a real value.
	 *
	 * @return {Object}
	 */
	shouldSetDefaultValue() {
		const hasValue = this.props.model.get(this.props.modelProp) !== undefined;
		if (!hasValue && this.props.collection.length > 0) {
			this.handleChange(this.props.collection.at(0).get(this.props.map.modelProp));
		}
		this.props.model.unsetInvalidProp(this.props.modelProp);
		return hasValue;
	}

	/**
	 * @private
	 * @memberOf SelectBox
	 *
	 * @description
	 * Handle the user change event, whenever a user changes the value
	 * by selecting a new one in the list, update the state and set the
	 * new value on the model.
	 *
	 * @param {String} value
	 *
	 * @return {undefined}
	 */
	handleChange() {
		const value = this.selectBox.value;
		this.setState({ value });
		this.props.onModelSync(this.props.model, this.props.modelProp, value);
	}

	/**
	 * @private
	 * @memberOf SelectBox
	 *
	 * @description
	 * Whenever the value in the model changes, update the state
	 * Only update state if the component is mounted.
	 *
	 * @return {undefined}
	 */
	handleModelChange() {
		this.setState({ value: this.props.model.get(this.props.modelProp) });
	}

	/**
	 * @private
	 * @memberOf SelectBox
	 *
	 * @description
	 * Compute the value on the fly, prefer the value on the model over
	 * the value in state.
	 *
	 * @return {String}
	 */
	getComputedValue() {
		if (this.props.model.has(this.props.modelProp)) {
			return this.props.model.get(this.props.modelProp);
		}
		return this.state.value;
	}

	/**
	 * @private
	 * @memberOf SelectBox
	 *
	 * @description
	 * Only force an update if the component is mounted
	 *
	 * @returns {undeifned}
	 */
	shouldForceUpdate() {
		this.forceUpdate.call(this);
	}

	/**
	 * @private
	 * @memberOf SelectBox
	 *
	 * @description
	 * Uses the collection as a source of truth, maps into option list by using the
	 * supplied map object, should contain <caption> and <key = value> map.
	 *
	 *
	 * @return {Array}
	 */
	sourceCollection() {
		return this.props.collection.map(model => <SelectBoxOption
			key={`${model.cid}select`}
			value={model.get(this.props.map.modelProp)}
			caption={model.get(this.props.map.caption)}
		/>, this);
	}

	/**
	 * @private
	 * @memberOf SelectBox
	 *
	 * @description
	 * Use children if this is a static selectbox
	 *
	 * @return {Array}
	 */
	sourceChildren() {
		return this.props.children;
	}

	/**
	 * @private
	 * @memberOf SelectBox
	 *
	 * @description
	 * Generate default option
	 *
	 * @return {Mixed} null|SelectBoxOption
	 */
	getDefaultOption() {
		if (!this.props.defaultOption) { return null; }
		return (<SelectBoxOption
			key={'defaultoption'}
			value={this.props.defaultOption.value}
			caption={this.props.defaultOption.caption}
		/>);
	}

	/**
	 * @private
	 * @memberOf SelectBox
	 *
	 * @description
	 * Generates the list of options to render
	 *
	 * @return {Array}
	 */
	getList() {
		if (this.props.hasOwnProperty('collection')) {
			return [this.getDefaultOption()].concat(this.sourceCollection());
		}
		return this.sourceChildren();
	}

	/**
	 * @private
	 * @memberOf SelectBox
	 *
	 * @description
	 * Renders the selectbox
	 *
	 *
	 * @return {Object} - React internals
	 */
	render() {
		return (
			<select
				disabled={this.props.disabled}
				className={this.props.className}
				value={this.getComputedValue()}
				ref={(el) => { this.selectBox = el; }}
				onChange={this.handleChange.bind(this)}
			>
				{this.getList()}
			</select>
		);
	}

}

SelectBox.defaultProps = {
	className: '',
	disabled: false,
	defaultOption: null,
	children: null,
	onModelSync(model, modelProp, value) {
		return model.set(modelProp, value);
	}
};

SelectBox.propTypes = {
	children: PropTypes.node,
	disabled: PropTypes.bool,
	className: PropTypes.string,
	defaultOption: PropTypes.object,
	collection: customPropTypes.collection.isRequired,
	map: PropTypes.object.isRequired,
	onModelSync: PropTypes.func.isRequired,
	model: customPropTypes.model.isRequired,
	modelProp: PropTypes.string.isRequired
};

export default SelectBox;
