import React from 'react';
import PropTypes from 'prop-types';
import Spinner from '../view/ViewSpinner';
import Backbone from '../utils/BackboneAdapter';
import customPropTypes from '../utils/PropValidation';
import requestparams from '../utils/RequestParams';

class PaginatedRowLoader extends React.Component {

	constructor(props) {
		super(props);
		this.state = {
			isLoading: false
		};
	}

	/**
	 * Make sure perpage on the original collection is the same as
	 * given to the paginatedrowloader.
	 * @return {undefined}
	 */
	componentDidMount() {
		this.props.collection.setPerPage(this.props.perpage);
	}

	getNextPage() {
		return Math.ceil((this.props.collection.length / this.props.perpage) + 1);
	}

	/**
	 * @memberOf PaginatedRowLoader
	 * @private
	 *
	 * @description
	 * Generate query object (HTTP_GET params)
	 *
	 * @return {Object}
	 */
	getQuery() {
		return {
			data: Object.assign({
				pagenum: this.getNextPage(),
				perpage: this.props.perpage
			}, requestparams.getSortOrder(this.props.collection),
				requestparams.getFilter(this.props.collection),
				requestparams.getCustomQueryParams(this.props.collection))
		};
	}

	/**
	 * @memberOf PaginatedRowLoader
	 * @private
	 *
	 * @description
	 * When clicking on the loader, get the next set of models
	 * using limit/offset params
	 *
	 * @returns {undefined}
	 */
	handleClick() {
		if (this.props.disabled) {
			return;
		}

		const models = this.props.collection.models;
		const offsetList = this.props.offsetList;

		this.setState({ isLoading: true });
		offsetList.reset();
		offsetList.url = requestparams.getUrl(this.props.collection);
		offsetList.fetch(this.getQuery())
			.then(() => {
				this.setState({ isLoading: false });
				this.props.collection.reset(models.concat(offsetList.toJSON()), { parse: true });
			});
	}

	/**
   * @memberOf PaginatedRowLoader
   * @private
   *
   * @description
   * Get css classes for tr.
   *
   * @return {Object}
   */
	getCSSClasses() {
		return [
			'row-loader',
			this.props.disabled ? 'row-loader-disabled' : ''
		].join(' ');
	}

	/**
	 * @memberOf PaginatedRowLoader
	 * @private
	 *
	 * @description
	 * Show the spinner or the text depending on if we are currently loading
	 * something or not.
	 *
	 * @return {Object}
	 */
	getContent() {
		return this.state.isLoading ? <Spinner isActive /> : this.props.children;
	}

	/**
	 * @memberOf PaginatedRowLoader
	 * @private
	 *
	 * @description
	 * Render the row loader
	 *
	 * @return {Object}
	 */
	render() {
		return (
			<tbody>
				<tr className={this.getCSSClasses()} onClick={this.handleClick.bind(this)}>
					<td className="row-loader-btn" colSpan={999}> {this.getContent()} </td>
				</tr>
			</tbody>
		);
	}

}

PaginatedRowLoader.defaultProps = {
	perpage: 5,
	offsetList: new Backbone.Collection(),
	disabled: false
};

PaginatedRowLoader.propTypes = {
	children: PropTypes.node.isRequired,
	disabled: PropTypes.bool,
	perpage: PropTypes.number,
	offsetList: customPropTypes.collection,
	collection: customPropTypes.collection.isRequired
};

export default PaginatedRowLoader;
