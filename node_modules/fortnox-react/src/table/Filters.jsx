import React from 'react';
import PropTypes from 'prop-types';
import Backbone from '../utils/BackboneAdapter';
import customPropTypes from '../utils/PropValidation';
import requestparams from '../utils/RequestParams';

class Filters extends React.Component {

	/**
	 * @private
	 * @memberOf Filters
	 *
	 * @description
	 * Handle a Click on a specific Filter, set this on the
	 * collection the refetch the entire collection based on the new Filter.
	 * Set the active Filter in state
	 *
	 * @param {String} filterID
	 *
	 * @returns {undefined}
	 */
	onUserSetFilter(filterID) {
		const params = this.props.getQuery.call(this, filterID);
		this.props.onClick(filterID);
		this.props.collection.setFilter(filterID);
		this.props.isLoading(true);
		this.props.filteredList.reset();
		this.props.filteredList.url = requestparams.getUrl(this.props.collection);
		this.props.filteredList.fetch(params)
			.then(() => {
				this.props.collection.reset(this.props.filteredList.toJSON(), { parse: true });
				this.props.onFilter(filterID);
				this.props.isLoading(false);
			});
	}

	/**
	 * @private
	 * @memberOf Filters
	 *
	 * @description
	 * Generate a list of filters
	 *
	 * @returns {undefined}
	 */
	getFilters() {
		return React.Children.map(this.props.children, (child) => {
			if (!child) {
				return null;
			}
			return React.cloneElement(child, {
				isActive: this.props.activeFilter === child.props.filterID,
				onClick: this.onUserSetFilter.bind(this)
			});
		});
	}

	/**
	 * @private
	 * @memberOf Filters
	 *
	 * @description
	 * Render the filter list
	 *
	 * @return {Object} React Elements
	 */
	render() {
		return (
			<div className="table-filters">
				{this.getFilters()}
			</div>
		);
	}
}

Filters.defaultProps = {
	onFilter: () => null,
	onClick: () => null,
	isLoading: () => null,
	activeFilter: null,
	getQuery(filterID) {
		return {
			data: Object.assign({
				filterby: filterID
			}, requestparams.getPagination(this.props.collection))
		};
	},
	filteredList: new Backbone.Collection()
};

Filters.propTypes = {
	collection: customPropTypes.collection.isRequired,
	filteredList: customPropTypes.collection,
	onFilter: PropTypes.func,
	onClick: PropTypes.func,
	isLoading: PropTypes.func,
	getQuery: PropTypes.func.isRequired,
	activeFilter: PropTypes.string,
	children: PropTypes.node.isRequired
};


export default Filters;
