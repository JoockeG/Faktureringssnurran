import React from 'react';
import PropTypes from 'prop-types';
import Backbone from '../utils/BackboneAdapter';
import customPropTypes from '../utils/PropValidation';
import requestparams from '../utils/RequestParams';

const ORDER = {
	ASC: 'asc',
	DESC: 'desc'
};

class SortableHeadCell extends React.Component {
	constructor(props) {
		super(props);
		this.state = {
			order: ORDER.ASC
		};
	}

	/**
	 * @memberOf SortableHeadCell
	 * @private
	 *
	 * @description
	 * Get the sort order from the collection if any is set, otherwise defaults.
	 *
	 * @returns {undefined}
	 */
	componentWillMount() {
		this.setState({
			order: this.props.collection.getOrder()
		});
	}

	componentDidUpdate(prevProps, prevState) {
		const { collection, sortProp, isLoading, sortedList, getQuery } = this.props;

		if (this.state.order !== prevState.order) {
			collection.setSortKey(sortProp);
			collection.setOrder(this.state.order);
			isLoading(true);
			sortedList.reset();
			sortedList.url = requestparams.getUrl(collection);
			sortedList.fetch(getQuery.call(this))
				.then(() => {
					collection.reset(sortedList.toJSON(), { parse: true });
					isLoading(false);
				});
		}
	}

	/**
	 * @memberOf SortableHeadCell
	 * @private
	 *
	 * @description
	 * Generate the style
	 *
	 * @return {Object}
	 */
	getStyle() {
		return {
			width: this.props.width
		};
	}

	/**
	 * @memberOf SortableHeadCell
	 * @private
	 *
	 * @description
	 * Set the sort order and fetch the collection based on this order.
	 *
	 * @return {undefined}
	 */
	handleClick() {
		this.setState({
			order: this.state.order === ORDER.ASC ? ORDER.DESC : ORDER.ASC
		});

		this.props.setSortColumnProp(this.props.sortProp);
	}

	/**
	 * @memberOf SortableHeadCell
	 * @private
	 *
	 * @description
	 * Get the cssclasses
	 *
	 * @return {String}
	 */
	getCSSClasses() {
		return [
			'sortable-column',
			(this.props.isSorting ? 'currently-sorting ' : ''),
			this.props.className
		].join(' ');
	}

	/**
	 * @memberOf SortableHeadCell
	 * @private
	 *
	 * @description
	 * Render a t header cell
	 *
	 * @return {Object}
	 */
	render() {
		const { children, showIcon, icon } = this.props;
		const columnIcon = this.state.order === ORDER.ASC ? <i className={`fa fa-sort-${icon}-asc`} /> : <i className={`fa fa-sort-${icon}-desc`} />;

		return (
			<th
				onClick={this.handleClick.bind(this)}
				style={this.getStyle()}
				className={this.getCSSClasses()}
			>
				{children}
				{showIcon && <span>{columnIcon}</span>}
			</th>
		);
	}
}

SortableHeadCell.defaultProps = {
	className: '',
	width: 'auto',
	isSorting: null,
	setSortColumnProp() { return null; },
	isLoading() {
		return null;
	},
	sortedList: new Backbone.Collection(),
	getQuery() {
		return {
			data: Object.assign({
				order: this.state.order,
				sortby: this.props.sortProp
			}, requestparams.getPagination(this.props.collection),
			requestparams.getFilter(this.props.collection),
			requestparams.getCustomQueryParams(this.props.collection))
		};
	},
	icon: 'amount',
	showIcon: false
};

SortableHeadCell.propTypes = {
	children: PropTypes.node.isRequired,
	isLoading: PropTypes.func,
	sortProp: PropTypes.string.isRequired,
	width: PropTypes.string,
	collection: customPropTypes.collection.isRequired,
	sortedList: customPropTypes.collection,
	isSorting: PropTypes.bool,
	className: PropTypes.string,
	setSortColumnProp: PropTypes.func.isRequired,
	getQuery: PropTypes.func,
	showIcon: PropTypes.bool,
	icon: PropTypes.oneOf(['numeric', 'amount', 'alpha']),
};

export default SortableHeadCell;
