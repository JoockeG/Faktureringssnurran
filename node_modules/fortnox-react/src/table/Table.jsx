import React from 'react';
import PropTypes from 'prop-types';
import Spinner from '../view/ViewSpinner';
import customPropTypes from '../utils/PropValidation';

class Table extends React.Component {

	/**
	 * @memberOf Table
	 * @private
	 *
	 * @description
	 * Generate styles for the table
	 *
	 * @returns {Object}
	 */
	getStyle() {
		return {
			tableLayout: this.props.tableLayout
		};
	}

	/**
	 * @memberOf Table
	 * @private
	 *
	 * @description
	 * Generate children, inject the collection
	 * This works as a "higher-order component"
	 *
	 * Note that this does not generate an array, since we are using React.Children
	 *
	 * @returns {Object}
	 */
	getChildren() {
		return React.Children.map(this.props.children, (child) => {
			if (!child) {
				return null;
			}
			return React.cloneElement(child, {
				collection: this.props.collection,
				isLoading: this.props.isLoading
			});
		});
	}

	/**
	 * Only show the loading overlay if there are previous records in the collection
	 * @return {Boolean}
	 */
	shouldShowLoadingIndicator() {
		return (this.props.collection.length > 0 && this.props.isLoading);
	}

	/**
	 * Generate a spinner, null will render nothing.
	 * @return {Mixed} Element|Null
	 */
	getLoadingIndicator() {
		return this.shouldShowLoadingIndicator() ? (
			<div className="table-spinner-overlay">
				<Spinner isActive />
			</div>
		) : null;
	}

	/**
	 * Use a loading state of the container, which clips the loading
	 * overlay by setting overflow hidden
	 * @return {String}
	 */
	getContainerCSSClasses() {
		return [
			this.props.className,
			'table-container',
			this.props.isLoading ? 'table-container-loading' : ''
		].join(' ');
	}

	/**
	 * @memberOf Table
	 * @private
	 *
	 * @description
	 * Generate children, inject the collection
	 * This works as a "higher-order component"
	 *
	 * Render the table
	 *
	 * @returns {Object} React Elements
	 */
	render() {
		return (
			<div className={this.getContainerCSSClasses()}>
				{this.getLoadingIndicator()}
				<table style={this.getStyle()} className="table table-bordered">
					{this.getChildren()}
				</table>
			</div>
		);
	}

}

Table.propTypes = {
	children: PropTypes.node.isRequired,
	collection: customPropTypes.collection.isRequired,
	tableLayout: PropTypes.string,
	isLoading: PropTypes.bool,
	className: PropTypes.string
};

Table.defaultProps = {
	tableLayout: null,
	isLoading: false,
	className: 'table-default'
};


export default Table;
