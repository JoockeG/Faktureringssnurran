import React from 'react';
import PropTypes from 'prop-types';
import Row from './Row';
import Cell from './Cell';
import customPropTypes from '../utils/PropValidation';

class BodyColumnGroup extends React.Component {

	constructor(props) {
		super(props);
		this.rerender = () => this.forceUpdate();
	}

	/**
	 * @memberOf BodyColumnGroup
	 * @private
	 *
	 * @description
	 * Setup event listeners
	 *
	 * @returns {undefined}
	 */
	componentDidMount() {
		const { collection, updateOn } = this.props;
		collection.on(updateOn.join(' '), this.rerender);
	}

	/**
	 * @memberOf BodyColumnGroup
	 * @private
	 *
	 * @description
	 * Teardown event listeners
	 *
	 * @returns {undefined}
	 */
	componentWillUnmount() {
		const { collection, updateOn } = this.props;
		collection.off(updateOn.join(' '), this.rerender);
	}

	/**
	 * @memberOf BodyColumnGroup
	 * @private
	 *
	 * @description
	 * Clone child component and inject row model from the collection
	 *
	 * @param {React.Element} child
	 * @param {Backbone.Model} model
	 *
	 * @return {React.Element}
	 */
	getClone(child, model) {
		return React.cloneElement(child, {
			model,
			modelProp: child.props.modelProp
		});
	}

	/**
	 * @memberOf BodyColumnGroup
	 * @private
	 *
	 * @description
	 * Generate a list of <td> cells
	 *
	 * @param {Backbone.Model} model
	 *
	 * @return {React.Elements}
	 */
	getCells(model) {
		return React.Children.map(this.props.children, (child) => {
			if (!child) {
				return null;
			}
			return (
				<Cell overflow={child.props.overflow}>{this.getClone(child, model)}</Cell>
			);
		});
	}

	/**
	 * @memberOf BodyColumnGroup
	 * @private
	 *
	 * @description
	 * Get a list of the rows
	 *
	 * @return {Array}
	 */
	getRows() {
		return this.props.collection.map((model, index) => <Row
			className={this.props.fnRowClass(model, index)}
			model={model}
			key={`${model.cid}tablerow`}
			onTab={this.props.onTab}
			onEnter={this.props.onEnter}
			onClick={this.props.onRowClick.bind(this)}
		>{this.getCells(model)}</Row>);
	}

	/**
	 * @memberOf BodyColumnGroup
	 * @private
	 *
	 * @description
	 * Render the table body
	 *
	 * @return {Object} table body with rows
	 */
	render() {
		return (
			<tbody>
				{this.getRows()}
			</tbody>
		);
	}

}

BodyColumnGroup.defaultProps = {
	isLoading: false,
	onTab(e) { return e; },
	onEnter: null,
	onRowClick: () => null,
	fnRowClass: () => null,
	updateOn: ['reset', 'add', 'remove']
};

BodyColumnGroup.propTypes = {
	onRowClick: PropTypes.func,
	collection: customPropTypes.collection.isRequired,
	onTab: PropTypes.func,
	onEnter: PropTypes.func,
	fnRowClass: PropTypes.func.isRequired,
	children: PropTypes.node.isRequired,
	updateOn: PropTypes.array
};

export default BodyColumnGroup;
