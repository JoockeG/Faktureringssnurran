import React from 'react';
import PropTypes from 'prop-types';
import Spinner from '../view/ViewSpinner';
import Backbone from '../utils/BackboneAdapter';
import customPropTypes from '../utils/PropValidation';

class RowLoader extends React.Component {
	constructor(props) {
		super(props);
		this.state = {
			isLoading: false,
			isLastRecord: false,
			offset: 0
		};
		const { offsetList, collection } = this.props;

		offsetList.url = collection.url || collection.url();
	}

	/**
	* @memberOf RowLoader
	* @private
	*
	* @description
	* Set all current params on the offset collection
	*
	* @return {Backbone.Collection}
	*/
	getOffsetList() {
		const { offsetList, collection } = this.props;

		offsetList.setSearchParams(collection.getSearchParams());
		offsetList.setSortKey(collection.getSortKey());
		offsetList.setOrder(collection.getOrder());
		return offsetList;
	}

	/**
	* @memberOf RowLoader
	* @private
	*
	* @description
	* When clicking on the loader, get the next set of models
	* using limit/offset params
	*
	* @returns {undefined}
	*/
	handleClick() {
		const models = this.props.collection.models;
		const offsetList = this.getOffsetList();
		this.setState({ isLoading: true });
		offsetList.reset();
		offsetList.fetch(this.props.getQuery.call(this)).then((response) => {
			this.setState({
				isLoading: false,
				isLastRecord: response.headers.isLastRecord
			});
			this.props.onOffsetFetch(response.headers.isLastRecord);
			this.props.collection.reset(models.concat(offsetList.toJSON()), { parse: true });
		});
	}

	/**
	* @memberOf RowLoader
	* @private
	*
	* @description
	* Show the spinner or the text depending on if we are currently loading
	* something or not.
	*
	* @return {Object}
	*/
	getContent() {
		return this.state.isLoading ? <Spinner isActive /> : this.props.children;
	}

	/**
	* @memberOf RowLoader
	* @private
	*
	* @description
	* Render the row loader
	*
	* @return {Object}
	*/
	render() {
		if (!this.props.isVisible(this.state)) {
			return null;
		}
		return (
			<tbody>
				<tr className="row-loader" onClick={this.handleClick.bind(this)}>
					<td className="row-loader-btn" colSpan={999}>
						{' '}{this.getContent()}{' '}
					</td>
				</tr>
			</tbody>
		);
	}
}

RowLoader.defaultProps = {
	/**
	* @memberOf RowLoader
	* @private
	*
	* @description
	* Generate query object (HTTP_GET params)
	*
	* @return {Object}
	*/
	getQuery() {
		return {
			data: {
				limit: this.props.limit,
				offset: this.props.collection.length
			}
		};
	},
	limit: 100,
	offsetList: new Backbone.Collection(),
	isVisible({ isLastRecord }) {
		return !isLastRecord && this.collection.length !== 0;
	},
	onOffsetFetch: () => null
};

RowLoader.propTypes = {
	children: PropTypes.node.isRequired,
	getQuery: PropTypes.func,
	offsetList: customPropTypes.collection,
	collection: customPropTypes.collection.isRequired,
	onOffsetFetch: PropTypes.func.isRequired,
	isVisible: PropTypes.func.isRequired
};

export default RowLoader;
