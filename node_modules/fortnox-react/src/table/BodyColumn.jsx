import React from 'react';
import PropTypes from 'prop-types';
import customPropTypes from '../utils/PropValidation';

class BodyColumn extends React.Component {

	constructor(props) {
		super(props);
		this.state = {
			value: null
		};
	}

	/**
	 * @memberOf BodyColumn
	 * @private
	 *
	 * @description
	 * Simulate a change event right before the mounting into the DOM to update
	 * the value in state and save a rerender
	 *
	 * @returns {undefined}
	 */
	componentWillMount() {
		this.handleChange();
	}

	/**
	 * @memberOf BodyColumn
	 * @private
	 *
	 * @description
	 * Setup event listeners
	 *
	 * @returns {undefined}
	 */
	componentDidMount() {
		this.props.model.on(`change:${this.props.modelProp}`, this.handleChange, this);
	}

	/**
	 * @memberOf BodyColumn
	 * @private
	 *
	 * @description
	 * Only rerender if the value changed
	 *
	 * @return {Boolean}
	 */
	shouldComponentUpdate() {
		return this.state.value !== this.props.model.get(this.props.modelProp);
	}

	/**
	 * @memberOf BodyColumn
	 * @private
	 *
	 * @description
	 * Clean up and teardown event listeners
	 *
	 * @returns {undefined}
	 */
	componentWillUnmount() {
		this.props.model.off(`change:${this.props.modelProp}`, this.handleChange, this);
	}

	/**
	 * @memberOf BodyColumn
	 * @private
	 *
	 * @description
	 * Update state
	 *
	 * @returns {undefined}
	 */
	handleChange() {
		this.setState({
			value: this.props.model.get(this.props.modelProp)
		});
	}

	/**
	 * @memberOf BodyColumn
	 * @private
	 *
	 * @description
	 * Render the content of the cell
	 *
	 * @return {Object} React Elements
	 */
	render() {
		return <span className="text">{this.state.value}</span>;
	}

}

BodyColumn.defaultProps = {
	isStatic: true
};

BodyColumn.propTypes = {
	model: customPropTypes.model.isRequired,
	modelProp: PropTypes.string.isRequired
};

export default BodyColumn;
