import React from 'react';
import PropTypes from 'prop-types';
import customPropTypes from '../utils/PropValidation';

class HeadColumnGroup extends React.Component {

	constructor(props) {
		super(props);
		this.state = {
			sortProp: null
		};
	}

	/**
	 * @memberOf HeadColumnGroup
	 * @private
	 *
	 * @description
	 * Listen to the "order" event, triggered when changing the sort order
	 * programatically and used to rerender what column is sorting.
	 *
	 * @returns {undefined}
	 */
	componentDidMount() {
		this.props.collection.on('order', this.update, this);
	}

	/**
	 * @memberOf HeadColumnGroup
	 * @private
	 *
	 * @description
	 * Only rerender if the props change or if the sortprop changes
	 *
	 * @param {Object} nextProps
	 * @param {Object} nextState
	 *
	 * @returns {Boolean}
	 */
	shouldComponentUpdate(nextProps, nextState) {
		return this.props !== nextProps || this.state.sortProp !== nextState.sortProp;
	}

	/**
	 * @memberOf HeadColumnGroup
	 * @private
	 *
	 * @description
	 * Tear down event listeners
	 *
	 * @returns {undefined}
	 */
	componentWillUnmount() {
		this.props.collection.off('order', this.update, this);
	}

	/**
	 * @memberOf HeadColumnGroup
	 * @private
	 *
	 * @description
	 * Update the sort order prop
	 *
	 * @returns {undefined}
	 */
	update() {
		this.setSortColumnProp(this.props.collection.getSortKey());
	}


	/**
	 * @memberOf HeadColumnGroup
	 * @private
	 *
	 * @description
	 * Set the current sort column, helps indicate
	 * what column is marked as sorting.
	 *
	 * @param {String} sortProp
	 *
	 * @returns {undefined}
	 */
	setSortColumnProp(sortProp) {
		this.setState({ sortProp });
	}

	/**
	 * @memberOf HeadColumnGroup
	 * @private
	 *
	 * @description
	 * Clone children with new props
	 *
	 * @return {Object}
	 */
	getContent() {
		return React.Children.map(this.props.children, (child) => {
			if (!child) {
				return null;
			}
			return React.cloneElement(child, {
				setSortColumnProp: this.setSortColumnProp.bind(this),
				isSorting: this.state.sortProp === child.props.sortProp,
				collection: this.props.collection
			});
		});
	}

	/**
	 * @memberOf HeadColumnGroup
	 * @private
	 *
	 * @description
	 * Render table headers
	 *
	 * @return {Object}
	 */
	render() {
		return (
			<thead>
				<tr>{this.getContent()}</tr>
			</thead>
		);
	}

}

HeadColumnGroup.propTypes = {
	children: PropTypes.node.isRequired,
	collection: customPropTypes.collection.isRequired
};

export default HeadColumnGroup;
