import React from 'react';
import TestUtils from 'react-dom/test-utils';
import 'utils/AjaxStub'
import Backbone from 'utils/BackboneAdapter';
import AutoComplete from 'autocomplete/AutoComplete';
import AutoCompleteColumn from 'autocomplete/Column';

const MockCollection = Backbone.Collection.extend({

			fetch(){
				return new Promise(resolve => {
					this.reset([
						{ customerName: 'Freddan', id: 1 },
						{ customerName: 'John', id: 2 },
						{ customerName: 'Francis', id: 3 },
						{ customerName: 'Gusto', id: 4 },
						{ customerName: 'Ruben', id: 5 },
						{ customerName: 'Bobster', id: 6 },
						{ customerName: 'Bobo', id: 7 },
						{ customerName: 'Marco', id: 8 },
						{ customerName: 'Polo', id: 9 },
						{ customerName: 'John', id: 10 },
						{ customerName: 'Dod', id: 11 }
					]);
					resolve();
				});
			}

});

const EmptyMockCollection = Backbone.Collection.extend({
			fetch(){
				return new Promise(resolve => {
					this.reset([]);
					resolve();
				});
			}
});


describe('AutoComplete', () => {

	it('simple rendering triggered by change event', done => {
		const LocalMock = Backbone.Collection.extend({

			fetch(){
				const p = new Promise(resolve => {
					this.reset([
						{ name: 'Ian Weismeister' },
						{ name: 'Bob leböb' },
						{ name: 'Georgio Bushi' }
					]);
					resolve();
				});
				return p;
			}

		});
		const component = TestUtils.renderIntoDocument(
			<AutoComplete
				displayFn={model => model.get('name')}
				setFn={
					resModel => {
						return {
							name: resModel.get('name')
						};
					}
				}
				model={new Backbone.Model()}
				modelProp="name"
				collection={new LocalMock()}>

				<AutoCompleteColumn modelProp="name"> Name </AutoCompleteColumn>
			</AutoComplete>
		);
		const input = TestUtils.scryRenderedDOMComponentsWithTag(component, 'input');

		TestUtils.scryRenderedDOMComponentsWithTag(component, 'tr').length.should.equal(2);
		input.value = 'I';
		TestUtils.Simulate.change(input[0]);

		setTimeout(() => {
			const cells = TestUtils.scryRenderedDOMComponentsWithTag(component, 'td');
			TestUtils.scryRenderedDOMComponentsWithTag(component, 'tr').length.should.equal(4);
			cells[0].textContent.should.equal('Ian Weismeister');
			cells[1].textContent.should.equal('Bob leböb');
			cells[2].textContent.should.equal('Georgio Bushi');
			done();
		}, 250);
	});



	it('rendering AutoComplete as dropdown via click', done => {
		const LocalMock = Backbone.Collection.extend({

			fetch(){
				const p = new Promise(resolve => {
					this.reset([
						{ name: 'Jane Smith' },
						{ name: 'John Smith' },
						{ name: 'Smitthon Wesson' },
						{ name: 'Jack theripper' },
						{ name: 'Bald Guy' }
					]);
					resolve();
				});
				return p;
			}

		});
		const component = TestUtils.renderIntoDocument(
			<AutoComplete
				displayFn={model => model.get('name')}
				setFn={
					resModel => {
						return {
							name: resModel.get('name')
						};
					}
				}
				model={new Backbone.Model()}
				modelProp="name"
				collection={new LocalMock()}>

				<AutoCompleteColumn modelProp="name"> Name </AutoCompleteColumn>
			</AutoComplete>
		);
		TestUtils.findRenderedDOMComponentWithTag(component, 'table').style.display.should.equal('none');
		TestUtils.Simulate.click(TestUtils.findRenderedDOMComponentWithClass(component, 'fa-chevron-down'));
		setTimeout(() => {
			TestUtils.findRenderedDOMComponentWithTag(component, 'table').style.display.should.equal('table');
			TestUtils.scryRenderedDOMComponentsWithTag(component, 'tr').length.should.equal(6);
		}, 250);
		done();
	});


	it('should selection correct result from list', done => {
		const m = new Backbone.Model();
		const LocalMock = Backbone.Collection.extend({

			fetch(){
				const p = new Promise(resolve => {
					this.reset([
						{ name: 'Ian Weismeister' },
						{ name: 'Bob leböb' },
						{ name: 'Georgio Bushi' }
					]);
					resolve();
				});
				return p;
			}

		});
		const component = TestUtils.renderIntoDocument(
			<AutoComplete
				displayFn={model => model.get('name')}
				setFn={
					resModel => {
						return {
							name: resModel.get('name')
						};
					}
				}
				model={m}
				modelProp="name"
				collection={new LocalMock()}>

				<AutoCompleteColumn modelProp="name"> Name </AutoCompleteColumn>
			</AutoComplete>
		);

		const input = TestUtils.findRenderedDOMComponentWithTag(component, 'input');
		input.value = 'I';
		TestUtils.Simulate.change(input);
		setTimeout(() => {
			const rows = TestUtils.scryRenderedDOMComponentsWithTag(component, 'tr');
			TestUtils.Simulate.click(rows[2]);
			input.value.should.equal('Bob leböb');
			m.get('name').should.equal('Bob leböb');
			done();
		}, 250);

	});


	it('selects correctly with custom setFn / displayFn', done => {
		const m = new Backbone.Model();
		const LocalMock = Backbone.Collection.extend({

			fetch(){
				const p = new Promise(resolve => {
					this.reset([
						{ name: 'Ian Weismeister', age: 34 },
						{ name: 'Bob leböb', age: 90 },
						{ name: 'Georgio Bushi', age: 51 }
					]);
					resolve();
				});
				return p;
			}

		});
		const component = TestUtils.renderIntoDocument(
			<AutoComplete
				displayFn={dispModel => 'Name: ' + dispModel.get('name')}
				setFn={resModel => ({
							id: resModel.get('id'),
							name: resModel.get('name')
					})
				}
				model={m}
				modelProp="name"
				collection={new LocalMock()}>

				<AutoCompleteColumn modelProp="name"> Name </AutoCompleteColumn>
			</AutoComplete>
		);

		const input = TestUtils.findRenderedDOMComponentWithTag(component, 'input');
		input.value = 'I';
		TestUtils.Simulate.change(input);
		setTimeout(() => {
			const rows = TestUtils.scryRenderedDOMComponentsWithTag(component, 'tr');
			TestUtils.Simulate.click(rows[2]);
			input.value.should.equal('Name: Bob leböb');
			done();
		}, 250);
	});


	it('should relect model changes in the AutoComplete field', done => {
		const model = new Backbone.Model({
			name: 'Stefano Böblövski',
			id: 5
		});
		const LocalMock = Backbone.Collection.extend({

			fetch(){
				const p = new Promise(resolve => {
					this.reset([
						{ name: 'Ian Weismeister', age: 34 },
						{ name: 'Bob leböb', age: 90 },
						{ name: 'Georgio Bushi', age: 51 }
					]);
					resolve();
				});
				return p;
			}

		});
		const component = TestUtils.renderIntoDocument(
			<AutoComplete
				displayFn={dispModel => 'Info: ' + dispModel.get('name')}
				setFn={resModel => ({
							id: resModel.get('id'),
							name: resModel.get('name')
					})
				}
				model={model}
				modelProp="name"
				collection={new LocalMock()}>

				<AutoCompleteColumn modelProp="name"> Name </AutoCompleteColumn>
			</AutoComplete>
		);

		const input = TestUtils.findRenderedDOMComponentWithTag(component, 'input');
		input.value.should.equal('Info: Stefano Böblövski');
		model.set({ name: 'Gunther Lerköff', id: 6 });
		input.value.should.equal('Info: Gunther Lerköff');
		done();

	});


	it('renders AutoComplete with more than 10 results (default)', done => {

		const component = TestUtils.renderIntoDocument(
			<AutoComplete
				displayFn={model => model.get('name')}
				setFn={
					result => {
						return {
							name: result.get('first_name')
						};
					}
				}
				model={new Backbone.Model()}
				modelProp="names"
				collection={new MockCollection()}>

				<AutoCompleteColumn modelProp="first_name"> Name </AutoCompleteColumn>
			</AutoComplete>
		);

		const icon = TestUtils.findRenderedDOMComponentWithClass(component, 'fa-chevron-down');

		TestUtils.Simulate.click(icon);
		setTimeout(() => {
			const els =  TestUtils.scryRenderedDOMComponentsWithClass(component, 'row-message');
			els.length.should.equal(1);
			els[0].textContent.should.equal('Fler sökresultat finns. Förfina din sökning.');
			done();
		}, 0);

	});


	it('renders no results with appropriate message', done => {
		const component = TestUtils.renderIntoDocument(
			<AutoComplete
				displayFn={model => model.get('name')}
				setFn={
					result => {
						return {
							name: result.get('first_name')
						};
					}
				}
				model={new Backbone.Model()}
				modelProp="names"
				collection={new MockCollection()}>

				<AutoCompleteColumn modelProp="first_name"> Name </AutoCompleteColumn>
			</AutoComplete>
		);

		setTimeout(() => {
			const els =  TestUtils.scryRenderedDOMComponentsWithClass(component, 'row-message');
			els.length.should.equal(1);
			els[0].textContent.should.equal('Inga sökresultat hittades.');
			done();
		}, 0);
	});


	it('handles AutoComplete required validation', done => {
		const m = new Backbone.Model();
		const component = TestUtils.renderIntoDocument(
			<AutoComplete
				required
				displayFn={model => model.get('name')}
				setFn={
					result => {
						return {
							name: result.get('first_name')
						};
					}
				}
				model={m}
				modelProp="names"
				collection={new MockCollection()}>

				<AutoCompleteColumn modelProp="first_name"> Name </AutoCompleteColumn>
			</AutoComplete>
		);
		const input = TestUtils.findRenderedDOMComponentWithTag(component, 'input');

		TestUtils.scryRenderedDOMComponentsWithClass(component, 'hint--top').length.should.equal(0);
		m.hasInvalidProps().should.be.true();
		m.validateProps();
		TestUtils.scryRenderedDOMComponentsWithClass(component, 'hint--top').length.should.equal(1);
		input.value = 'Some value';
		TestUtils.Simulate.change(input);
		setTimeout(() => {
			TestUtils.Simulate.click(TestUtils.scryRenderedDOMComponentsWithTag(component, 'tr')[1]);
			m.hasInvalidProps().should.be.false();
			done();
		}, 250);

	});


	it('does not set invalid props or render error when not required', done => {
		const m = new Backbone.Model();
		const component = TestUtils.renderIntoDocument(
			<AutoComplete
				displayFn={model => model.get('name')}
				setFn={
					result => {
						return {
							name: result.get('first_name')
						};
					}
				}
				model={m}
				modelProp="names"
				collection={new MockCollection()}>

				<AutoCompleteColumn modelProp="first_name"> Name </AutoCompleteColumn>
			</AutoComplete>
		);
		m.hasInvalidProps().should.be.false();
		m.validateProps();
		m.hasInvalidProps().should.be.false();
		TestUtils.scryRenderedDOMComponentsWithClass(component, 'hint--top').length.should.equal(0);
		done();
	});

});
