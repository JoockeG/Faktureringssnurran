import React from 'react';
import ReactDOM from 'react-dom';
import TestUtils from 'react-dom/test-utils';
import Backbone from 'utils/BackboneAdapter';
import should from 'should';
import _ from 'utils/UnderscoreAdapter';
import FieldText from 'form/TextBox';
import FieldNumeric from 'form/Numeric';

import 'utils/AjaxStub'

describe('Form FieldNumeric', () => {

	it('Validator receives correct values', done => {
		const Price = Backbone.Model.extend({
			validators:{
				sum: _.after(2, value => {
					//Only assert second time we call validator here
					value.should.equal(11);
					done();
					return value !== 11 ? 'Fel' : true;
				})
			}
		});
		const total = new Price({ sum: 10 });
		const component = TestUtils.renderIntoDocument(
			<FieldNumeric model={total} modelProp="sum" validator="sum" />
		);

		total.on('change:foo', () => total.validateProps());
		total.set({ sum: 11, foo: 1 });
	});


	it('Allows negative numeric values', done => {
		const component = TestUtils.renderIntoDocument(
			<FieldNumeric model={new Backbone.Model()} modelProp="x" />
		);

		component.validate('-100').should.be.true();
		component.validate('100-').should.equal('Fältet får endast innehålla siffror.');
		component.validate('1-00').should.equal('Fältet får endast innehålla siffror.');
		component.validate('-').should.equal('Fältet får endast innehålla siffror.');
		done();

	});

	it('Should allow decimal values', done => {
		const component = TestUtils.renderIntoDocument(
			<FieldNumeric model={new Backbone.Model()} modelProp="x" />
		);

		component.validate('1.00').should.be.true();
		component.validate('1,00').should.be.true();
		component.validate('-1.00').should.be.true();
		component.validate('.').should.equal('Fältet får endast innehålla siffror.');
		component.validate('1.').should.equal('Fältet får endast innehålla siffror.');
		component.validate('.1').should.equal('Fältet får endast innehålla siffror.');
		done();
	});

	it('Should not validate Disabled fields', done => {
		const m = new Backbone.Model();
		const component = TestUtils.renderIntoDocument(
			<FieldNumeric model={m} modelProp="sum" disabled />
		);
		const input = TestUtils.findRenderedDOMComponentWithTag(component, 'input');
		TestUtils.findRenderedComponentWithType(component, FieldText).state.isValid.should.be.true();
		input.value = 'C'; //Not considered invalid since field is Disabled
		TestUtils.Simulate.change(ReactDOM.findDOMNode(input));
		m.validateProps();
		TestUtils.findRenderedComponentWithType(component, FieldText).state.isValid.should.be.true();
		done();
	});


	it('Should support clearing the model', done => {
		const m = new Backbone.Model({ price: 22 });
		const component = TestUtils.renderIntoDocument(
			<FieldNumeric model={m} modelProp="price"  />
		);
		const input = TestUtils.findRenderedDOMComponentWithTag(component, 'input');
		input.value.should.equal('22');
		m.clear();
		m.has('price').should.be.false();
		input.value.should.equal('');
		done();
	});


	it('Should not yield error when running validateProps on required field', done => {
		const m = new Backbone.Model({ price: 22 });
		const component = TestUtils.renderIntoDocument(
			<FieldNumeric model={m} modelProp="price" required  />
		);
		const input = TestUtils.findRenderedDOMComponentWithTag(component, 'input');
		m.validateProps();
		input.value.should.equal('22');
		done();
	});

	it('Should represent empty string with null on the model', done => {
		const m = new Backbone.Model();
		const component = TestUtils.renderIntoDocument(
			<FieldNumeric model={m} modelProp="price" required  />
		);
		const input = TestUtils.findRenderedDOMComponentWithTag(component, 'input');
		TestUtils.Simulate.change(ReactDOM.findDOMNode(input));
		TestUtils.Simulate.blur(ReactDOM.findDOMNode(input));
		should.not.exist(m.get('price'));
		done();
	});


	it('should accept 0 as valid value', done => {
		const m = new Backbone.Model();
		const component = TestUtils.renderIntoDocument(
			<FieldNumeric model={m} modelProp="price" required  />
		);
		const input = TestUtils.findRenderedDOMComponentWithTag(component, 'input');

		input.value.should.equal('');

		input.value = '0';

		TestUtils.Simulate.change(input);
		TestUtils.Simulate.blur(input);

		//Correct value retained after change/blur
		input.value.should.equal('0');
		done();

	});



});
