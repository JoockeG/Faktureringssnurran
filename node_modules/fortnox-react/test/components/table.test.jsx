import React from 'react';
import TestUtils from 'react-dom/test-utils';
import Backbone from 'utils/BackboneAdapter';
import BodyColumn from 'table/BodyColumn';
import HeadColumn from 'table/HeadColumn';
import Table from 'table/Table';
import HeadColumnGroup from 'table/HeadColumnGroup';
import BodyColumnGroup from 'table/BodyColumnGroup';
import SortableHeadColumn from 'table/SortableHeadColumn';
import RowLoader from 'table/RowLoader';
import Filters from 'table/Filters';
import Filter from 'table/Filter';
import FieldNumeric from 'form/Numeric';

import 'utils/AjaxStub';

const DefaultCollection = Backbone.Collection.extend({
	fetch(){
		return new Promise(resolve => resolve());
	}
});

const getRandomCollectionData = () => {
	return new DefaultCollection(Array.apply(null, new Array(5)).map(() => {
			return {
				id: Math.floor(Math.random() * 999),
				name: 'Default namn',
				sum: Math.floor(Math.random() * 99999999999 + 2000)
			};
		})
	);
};

class CustomIcon extends React.Component{

	render(){
		return(
			<span>
				<i className="fa fa-user-plus" />
			</span>
		);
	}

}




describe('Table tests', () => {

	it('renders a simple Table', done => {
		const collection = getRandomCollectionData();
		collection.at(0).set({ id: 333 });

		const component = TestUtils.renderIntoDocument(
			<Table collection={collection}>
				<HeadColumnGroup>
					<HeadColumn>Column A</HeadColumn>
				</HeadColumnGroup>

				<BodyColumnGroup>
					<BodyColumn modelProp="id" />
				</BodyColumnGroup>
			</Table>
		);

		const cells = TestUtils.scryRenderedDOMComponentsWithClass(component, 'field-cell');
		const rows = TestUtils.scryRenderedDOMComponentsWithTag(component, 'tr');

		rows.length.should.equal(6);
		cells.length.should.equal(5);

		cells[0].textContent.should.equal('333');

		done();
	});



	it('should handle databinding in static text cells', done => {
		const collection = getRandomCollectionData();
		collection.at(1).set({ id: 1337 });

		const component = TestUtils.renderIntoDocument(
			<Table collection={collection}>
				<HeadColumnGroup>
					<HeadColumn>Column A</HeadColumn>
					<HeadColumn>Number Field</HeadColumn>
				</HeadColumnGroup>

				<BodyColumnGroup>
					<BodyColumn modelProp="id" />
				</BodyColumnGroup>
			</Table>
		);

		const cells = TestUtils.scryRenderedDOMComponentsWithClass(component, 'field-cell');

		cells[1].textContent.should.equal('1337');
		collection.at(1).set('id', 999);
		cells[1].textContent.should.equal('999');
		done();

	});


	it('should handle databinding with custom fields', done => {
		const collection = getRandomCollectionData();
		collection.at(1).set({ id: 1337 });

		const component = TestUtils.renderIntoDocument(
			<Table collection={collection}>
				<HeadColumnGroup>
					<HeadColumn>Column A</HeadColumn>
					<HeadColumn>Number Field</HeadColumn>
				</HeadColumnGroup>

				<BodyColumnGroup>
					<BodyColumn modelProp="id" />
					<FieldNumeric modelProp="id" />
				</BodyColumnGroup>
			</Table>
		);

		const cells = TestUtils.scryRenderedDOMComponentsWithClass(component, 'field-cell');
		const inputs = TestUtils.scryRenderedDOMComponentsWithTag(component, 'input');

		cells[2].textContent.should.equal('1337');
		inputs[1].value.should.equal('1337');
		inputs[1].value = '888';
		TestUtils.Simulate.change(inputs[1]);
		TestUtils.Simulate.blur(inputs[1]);
		collection.at(1).get('id').should.equal(888);
		done();
	});



	it('uses custom Cell Content/components', done => {
		const collection = getRandomCollectionData();
		collection.at(1).set({ id: 1 });

		const component = TestUtils.renderIntoDocument(
			<Table collection={collection}>
				<HeadColumnGroup>
					<HeadColumn>Column A</HeadColumn>
					<HeadColumn>Tool icons</HeadColumn>
				</HeadColumnGroup>

				<BodyColumnGroup>
					<BodyColumn modelProp="id" />
					<CustomIcon modelProp="id" />
				</BodyColumnGroup>
			</Table>
		);

		const customEls = TestUtils.scryRenderedDOMComponentsWithClass(component, 'fa-user-plus');
		customEls.length.should.equal(5); //5 is once for each row.
		done();
	});



	it('renders Table Filters', done => {
		const collection = getRandomCollectionData();
		const component = TestUtils.renderIntoDocument(
			<Filters collection={collection}>
				<Filter color="red" filterID="a">Filter A</Filter>
				<Filter color="gray" filterID="b">Filter B</Filter>
			</Filters>
		);
		const customEls = TestUtils.scryRenderedDOMComponentsWithClass(component, 'filter');
		customEls.length.should.equal(2);
		done();
	});


	it('displays a Table loading indicator', done => {
		const collection = getRandomCollectionData();

		const component = TestUtils.renderIntoDocument(
			<Table collection={collection} isLoading>
				<HeadColumnGroup>
					<HeadColumn>Column A</HeadColumn>
					<HeadColumn>Tool icons</HeadColumn>
				</HeadColumnGroup>

				<BodyColumnGroup>
					<BodyColumn modelProp="id" />
					<CustomIcon modelProp="id" />
				</BodyColumnGroup>
			</Table>
		);

		const customEls = TestUtils.scryRenderedDOMComponentsWithClass(component, 'loader');
		customEls.length.should.equal(1);
		done();
	});


	it('handles sorting via a special Head Column component', done => {
		const List = Backbone.Collection.extend({
			url: '/none',

			fetch(){
				return new Promise(resolve => {
					this.reset(listData);
					resolve(listData);
				});
			}
		});
		const listData = [
			{
				id: 1,
				name: 'John'
			},
			{
				id: 2,
				name: 'Doe'
			}
		];


		const component = TestUtils.renderIntoDocument(
			<Table collection={new List()}>
				<HeadColumnGroup>
					<SortableHeadColumn sortProp="id" sortedList={new List()}>Column A / ID</SortableHeadColumn>
					<HeadColumn> Column B / Name </HeadColumn>
				</HeadColumnGroup>

				<BodyColumnGroup>
					<BodyColumn modelProp="id" />
					<BodyColumn modelProp="name" />
				</BodyColumnGroup>
			</Table>
		);

		const ths = TestUtils.scryRenderedDOMComponentsWithTag(component, 'th');

		ths[0].className.should.equal('sortable-column  ');
		TestUtils.Simulate.click(ths[0]);
		ths[0].className.should.equal('sortable-column currently-sorting  ');
		done();

	});


	it('should render Table with fixed Table css layout', done => {
		const collection = getRandomCollectionData();
		const component = TestUtils.renderIntoDocument(
			<Table collection={collection} tableLayout="fixed">
				<HeadColumnGroup>
					<SortableHeadColumn sortProp="id">Column A / ID</SortableHeadColumn>
					<HeadColumn> Column B / Name </HeadColumn>
				</HeadColumnGroup>

				<BodyColumnGroup>
					<BodyColumn modelProp="id" />
					<BodyColumn modelProp="name" overflow="hidden" />
				</BodyColumnGroup>
			</Table>
		);

		const t = TestUtils.scryRenderedDOMComponentsWithTag(component, 'table');
		const customEls = TestUtils.scryRenderedDOMComponentsWithClass(component, 'field-cell-overflow');

		customEls.length.should.be.above(0);
		t[0].style.tableLayout.should.equal('fixed');
		done();
	});



	it('should handle Table Row click events', done => {
		const collection = new Backbone.Collection([{ clicked: 'not clicked' }]);

		const component = TestUtils.renderIntoDocument(
			<Table collection={collection}>
				<HeadColumnGroup>
					<HeadColumn> Column A </HeadColumn>
				</HeadColumnGroup>

				<BodyColumnGroup onRowClick={model => model.set('clicked', 'clicked')}>
					<BodyColumn modelProp="clicked" />
				</BodyColumnGroup>
			</Table>
		);

		const rows = TestUtils.scryRenderedDOMComponentsWithTag(component, 'tr');
		const cell = TestUtils.scryRenderedDOMComponentsWithTag(component, 'td');

		cell[0].textContent.should.equal('not clicked');

		TestUtils.Simulate.click(rows[1]);

		cell[0].textContent.should.equal('clicked');
		done();
	});



	it('renders a Table Row loader', done => {
			const List = Backbone.Collection.extend({
				url(){
				return 'a/b';
				}
			});

			const LargeList = Backbone.Collection.extend({

				initialize(){
					this.counter = 0;
				},

				getData(){
					if(this.counter === 0){
						return [
							{ id: 1, name: 'John' },
							{ id: 2, name: 'Bob' }
						];
					}

					return [
						{ id: 3, name: 'Wilson' },
						{ id: 4, name: 'Ankan' }
					];
				},

				fetch(){
					this.reset(this.getData());
					this.counter += 1;
					return {
						then: (fn) => {
 						fn({
							data: this.getData(),
							headers: { isLastRecord: false }
						});
}
					};
				}

			});

			const component = TestUtils.renderIntoDocument(
				<Table collection={new List([{ id: 0, name: 'Default' }])}>
					<HeadColumnGroup>
						<HeadColumn>Column A</HeadColumn>
					</HeadColumnGroup>

					<BodyColumnGroup>
						<BodyColumn modelProp="name" />
					</BodyColumnGroup>

					<RowLoader offsetList={new LargeList()}> Ladda mer </RowLoader>
				</Table>
			);

			const cells = TestUtils.scryRenderedDOMComponentsWithClass(component, 'field-cell');
			const rowLoader = TestUtils.scryRenderedDOMComponentsWithClass(component, 'row-loader');

			rowLoader.length.should.equal(1);
			cells.length.should.equal(1);
			TestUtils.Simulate.click(rowLoader[0]);
			TestUtils.scryRenderedDOMComponentsWithClass(component, 'field-cell').length.should.be.above(0);
			done();

	});



});
