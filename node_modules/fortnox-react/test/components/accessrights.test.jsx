import React from 'react';
import TestUtils from 'react-dom/test-utils';
import Backbone from 'utils/BackboneAdapter';
import 'utils/AjaxStub';
import _ from 'utils/UnderscoreAdapter';
import ActionMessage from 'utils/ActionMessages';
import ActionMessageQueue from 'utils/ActionMessageQueue';

describe('Actionmessages', () => {

	it('Renders messages when added to the messagequeue', done => {
		const eventBus = _.extend({}, Backbone.Events);
		const component = TestUtils.renderIntoDocument(
			<ActionMessage messages={new ActionMessageQueue([], { eventBus })} />
		);

		component.props.messages.on('add', msg => {
			component.props.messages.get(msg.cid).should.equal(msg);
			msg.get('msg').should.equal('This is a unique error message (001)');
			msg.get('type').should.equal('error');
			msg.get('ttl').should.equal(200);
			TestUtils.scryRenderedDOMComponentsWithClass(component, 'message').length.should.be.above(0);
			TestUtils.scryRenderedDOMComponentsWithClass(component, 'fa-exclamation-circle').length.should.be.above(0);
			done();
		});

		eventBus.trigger('message:action', 'This is a unique error message (001)', 'error', 200);
	});


	it('removes messages from component when removing them from the collection', done => {
		const eventBus = _.extend({}, Backbone.Events);
		const messageQueue = new ActionMessageQueue([], { eventBus });
		const component = TestUtils.renderIntoDocument(
			<ActionMessage messages={messageQueue} />
		);
		component.props.messages.on('remove', () => {
			component.props.messages.length.should.equal(0);
			done();
		});
		eventBus.trigger('message:action', 'This is a unique (9X9X9X) error message', 'error', 200);
		component.props.messages.length.should.equal(1);
	});


	it('removes messages from the dom when clicking the (X) button', done => {
		const eventBus = _.extend({}, Backbone.Events);
		const messageQueue = new ActionMessageQueue([], { eventBus });
		const component = TestUtils.renderIntoDocument(
			<ActionMessage messages={messageQueue} />
		);

		eventBus.trigger('message:action', 'This is a unique error message (002)', 'error', 200);

		const btns = TestUtils.scryRenderedDOMComponentsWithClass(component, 'message-hide');
		TestUtils.scryRenderedDOMComponentsWithClass(component, 'message').length.should.equal(1);
		messageQueue.length.should.equal(1);

		TestUtils.Simulate.click(btns[0]);

		TestUtils.scryRenderedDOMComponentsWithClass(component, 'message').length.should.equal(0);
		messageQueue.length.should.equal(0);
		done();
	});


	it('uses correct message position(s)', done => {
		const eventBus = _.extend({}, Backbone.Events);
		const messageQueue = new ActionMessageQueue([], { eventBus });
		const component = TestUtils.renderIntoDocument(
			<ActionMessage messages={messageQueue} />
		);
		const checkMessages = _.after(3, () => {
			const els = TestUtils.scryRenderedDOMComponentsWithClass(component, 'message');
			els.length.should.equal(3);
			els[0].style.bottom.should.equal('0px');
			els[1].style.bottom.should.equal('50px');
			els[2].style.bottom.should.equal('100px');
			done();
		});
		component.props.messages.on('add', checkMessages);
		eventBus.trigger('message:action', 'This is a error message', 'error', 500);
		eventBus.trigger('message:action', 'This is another error message!', 'error', 500);
		eventBus.trigger('message:action', 'This is the third error message!', 'error', 500);
	});


	it('has legacy notification compatibility', done => {
		const eventBus = _.extend({}, Backbone.Events);
		const messageQueue = new ActionMessageQueue([], { eventBus });
		const component = TestUtils.renderIntoDocument(
			<ActionMessage messages={messageQueue} />
		);

		const notificationType = {
			INFO: [
				{
					body: 'The notification message',
					created: 5678909876
				}
			]
		};
		const checkMessages = _.after(1, (msg) => {
			TestUtils.scryRenderedDOMComponentsWithClass(component, 'message').length.should.equal(1);
			msg.get('msg').should.equal('The notification message');
			done();
		});
		component.props.messages.on('add', checkMessages);
		eventBus.trigger('SERVER.NOTIFICATIONS', notificationType);
	});


});
