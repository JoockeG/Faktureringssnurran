import React from 'react';
import { MemoryRouter as Router } from 'react-router-dom';
import 'should';
import sinon from 'sinon';

import * as Backbone from 'backbone';
import TestUtils from 'react-dom/test-utils';

import { LeaveViewDialog } from 'view';
import { Dialog, EventBus } from 'utils';

describe('LeaveViewDialog', () => {
	const sandbox = sinon.sandbox.create();
	const route = { path: 'test'};
	let numberOfChanges = 1;
	let document;
	let component;
	let history;
	let model;

	beforeEach(() => {
		model = new Backbone.Model();
		document = TestUtils.renderIntoDocument(
			<Router>
				<LeaveViewDialog route={route} model={model} threshold={numberOfChanges} />
			</Router>
		);
		component = TestUtils.findRenderedComponentWithType(document, LeaveViewDialog);
		history = component.context.router.history;
	});

	it('Listens to formchange events', () => {
		component.changeCounter.should.equal(0);
		EventBus.trigger('test:formchange');
		component.changeCounter.should.equal(1);
	});

	it('Should block navigation if more than the configured number of changes', () => {
		history.push('/foo');
		EventBus.trigger('test:formchange');
		history.push('/bar');
		history.location.pathname.should.equal('/foo');
	});

	it('Shows a dialog on navigation if there are changes', () => {
		const dialog = TestUtils.findRenderedComponentWithType(document, Dialog);
		dialog.props.isOpen.should.be.false();
		EventBus.trigger('test:formchange');
		history.push('/foo');
		dialog.props.isOpen.should.be.true();
	});

	it('Calls endTransition if "No" is clicked', () => {
		const dialog = TestUtils.findRenderedComponentWithType(document, Dialog);
		const expectation = sandbox.mock(component).expects("endTransition").once();
		EventBus.trigger('test:formchange');
		history.push('/foo');
		TestUtils.Simulate.click(findButtonWithLabel(dialog, 'Nej'));
		expectation.verify();
	});

	it('Calls continueTransition if "Yes" is clicked', () => {
		const dialog = TestUtils.findRenderedComponentWithType(document, Dialog);
		const expectation = sandbox.mock(component).expects("continueTransition").once();
		EventBus.trigger('test:formchange');
		history.push('/foo');

		TestUtils.Simulate.click(findButtonWithLabel(dialog, 'Ja'));
		expectation.verify();
	});

	it('Saves the model on continueTransition', done => {
		const expectation = sandbox.mock(model).expects('save').once().returns(Promise.resolve());
		const dialog = TestUtils.findRenderedComponentWithType(document, Dialog);
		EventBus.trigger('test:formchange');
		history.push('/foo');

		component.continueTransition().then(() => {
			expectation.verify();
			dialog.props.isOpen.should.be.false();
			history.location.pathname.should.equal('/foo');
		}).then(done);
	});

	it('Navigates to next on endTransition', done => {
		const expectation = sandbox.mock(model).expects('save').never();
		const dialog = TestUtils.findRenderedComponentWithType(document, Dialog);
		EventBus.trigger('test:formchange');
		history.push('/foo');

		component.endTransition().then(() => {
			expectation.verify();
			dialog.props.isOpen.should.be.false();
			history.location.pathname.should.equal('/foo');
		}).then(done);
	});

	const findButtonWithLabel = (root, label) => {
		return TestUtils.scryRenderedDOMComponentsWithTag(root, 'button').filter(button => button.innerHTML.includes(label))[0];
	};
});