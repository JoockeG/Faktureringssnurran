import React from 'react';
import TestUtils from 'react-dom/test-utils';
import Backbone from 'utils/BackboneAdapter';
import FieldCheckBox from 'form/FieldCheckbox';

import 'utils/AjaxStub';

const model = new Backbone.Model({ activated: true });

describe('Form FieldCheckBox', () => {
	it('Should be disabled', (done) => {
		const component = TestUtils.renderIntoDocument(
			<FieldCheckBox model={model} modelProp="activated" disabled />
		);

		TestUtils.findRenderedDOMComponentWithTag(component, 'input');
		component.props.disabled.should.be.true();
		done();
	});

	it('should align tooltip on top of element', (done) => {
		const component = TestUtils.renderIntoDocument(
			<FieldCheckBox model={model} modelProp="activated" />
		);

		TestUtils.findRenderedDOMComponentWithTag(component, 'input');
		component.props.tooltipAlign.should.equal('top');
		done();
	});

	it('should use given modelProp', (done) => {
		const component = TestUtils.renderIntoDocument(
			<FieldCheckBox model={model} modelProp="activated" />
		);

		TestUtils.findRenderedDOMComponentWithTag(component, 'input');
		component.props.modelProp.should.equal('activated');
		done();
	});

	it('should use title', (done) => {
		const component = TestUtils.renderIntoDocument(
			<FieldCheckBox model={model} modelProp="activated" title="test" />
		);

		TestUtils.findRenderedDOMComponentWithTag(component, 'input');
		component.props.title.should.equal('test');
		done();
	});

	it('should use required', (done) => {
		let component = TestUtils.renderIntoDocument(
			<FieldCheckBox model={model} modelProp="activated" />
		);

		TestUtils.findRenderedDOMComponentWithTag(component, 'input');
		component.props.required.should.equal(false);

		component = TestUtils.renderIntoDocument(
			<FieldCheckBox model={model} modelProp="activated" required />
		);

		TestUtils.findRenderedDOMComponentWithTag(component, 'input');
		component.props.required.should.equal(true);
		done();
	});

	it('should use given classes', (done) => {
		const component = TestUtils.renderIntoDocument(
			<FieldCheckBox model={model} modelProp="activated" className="left center" />
		);

		TestUtils.findRenderedDOMComponentWithTag(component, 'input');
		component.props.className.should.equal('left center');
		done();
	});

	it('should use given validator', (done) => {
		const component = TestUtils.renderIntoDocument(
			<FieldCheckBox model={model} modelProp="activated" validator="activated" />
		);

		TestUtils.findRenderedDOMComponentWithTag(component, 'input');
		component.props.validator.should.equal('activated');
		done();
	});

	it('should use given tooltip', (done) => {
		const component = TestUtils.renderIntoDocument(
			<FieldCheckBox model={model} modelProp="activated" tooltip="You have not checked me" />
		);

		TestUtils.findRenderedDOMComponentWithTag(component, 'input');
		component.props.tooltip.should.equal('You have not checked me');
		done();
	});

});
