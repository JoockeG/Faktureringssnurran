import React from 'react';
import TestUtils from 'react-dom/test-utils';
import moment from 'utils/MomentAdapter';
import _ from 'utils/UnderscoreAdapter';
import DatePicker from 'utils/DatePicker';


/**
 * !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
 * ATTENTION!
 * KEEP IN MIND THAT BECAUSE ARRAYS START AT 0, THE MONTHS ARE ONE BEHIND
 * WHICH MEANS 0 = JANUARY, 1 = FEBRUARY AND SO ON IN THESE TESTS.
 * !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
 */


describe('Datepicker', () => {

  it('Should render a datepicker with correct values', done => {
    const component = TestUtils.renderIntoDocument(
      <DatePicker initialYear={2014} initialMonth={9} />
    );
    const values = TestUtils.scryRenderedDOMComponentsWithTag(component, 'td')
                   .map(n => n.textContent);
    values.should.deepEqual(
      ['40', '', '', '1', '2', '3', '4', '5',
       '41', '6', '7', '8', '9', '10', '11', '12',
       '42', '13', '14', '15', '16', '17', '18', '19',
       '43', '20', '21', '22', '23', '24', '25', '26',
       '44', '27', '28', '29', '30', '31', '', '']
    );
    done();
  });


  it('should correctly handle the dates of easter', done => {
    const component = TestUtils.renderIntoDocument(
      <DatePicker />
    );
    component.getDateOfEaster(1980).toArray().slice(0, 3).should.deepEqual([1980, 3, 6]);
    component.getDateOfEaster(1994).toArray().slice(0, 3).should.deepEqual([1994, 3, 3]);
    component.getDateOfEaster(2009).toArray().slice(0, 3).should.deepEqual([2009, 3, 12]);
    component.getDateOfEaster(2017).toArray().slice(0, 3).should.deepEqual([2017, 3, 16]);
    component.getDateOfEaster(2021).toArray().slice(0, 3).should.deepEqual([2021, 3, 4]);
    done();
  });

  it('should correctly handle the dates of midsummer', done => {
    const component = TestUtils.renderIntoDocument(
      <DatePicker />
    );
    component.getMidsummerDate(1980).toArray().slice(0, 3).should.deepEqual([1980, 5, 21]);
    component.getMidsummerDate(1994).toArray().slice(0, 3).should.deepEqual([1994, 5, 25]);
    component.getMidsummerDate(2009).toArray().slice(0, 3).should.deepEqual([2009, 5, 20]);
    component.getMidsummerDate(2017).toArray().slice(0, 3).should.deepEqual([2017, 5, 24]);
    component.getMidsummerDate(2021).toArray().slice(0, 3).should.deepEqual([2021, 5, 26]);
    done();
  });


  it('should correctly handle the dates of all saints day', done => {
    const component = TestUtils.renderIntoDocument(
      <DatePicker />
    );
    component.getAllSaintsDayDate(1980).toArray().slice(0, 3).should.deepEqual([1980, 10, 1]);
    component.getAllSaintsDayDate(1994).toArray().slice(0, 3).should.deepEqual([1994, 10, 5]);
    component.getAllSaintsDayDate(2009).toArray().slice(0, 3).should.deepEqual([2009, 9, 31]);
    component.getAllSaintsDayDate(2017).toArray().slice(0, 3).should.deepEqual([2017, 10, 4]);
    component.getAllSaintsDayDate(2021).toArray().slice(0, 3).should.deepEqual([2021, 10, 6]);
    done();
  });


  it('should produce equal dates using #isEqualDate', done => {
    const component = TestUtils.renderIntoDocument(
      <DatePicker />
    );
    component.isEqualDate(moment(), moment()).should.be.true();
    component.isEqualDate(moment([2005, 4, 5]), moment([2005, 4, 5])).should.be.true();
    done();
  });


  it('should properly handle Swedish holidays', done => {
    const component = TestUtils.renderIntoDocument(
      <DatePicker />
    );
    component.isHoliday('sv', moment([2005, 4, 8])).should.be.true('Söndag.');
    component.isHoliday('sv', moment([2005, 0, 1])).should.be.true('Nyårsdagen.');
    component.isHoliday('sv', moment([2005, 0, 6])).should.be.true('Trettondedag jul.');
    component.isHoliday('sv', moment([2005, 2, 25])).should.be.true('Långfredagen.');
    component.isHoliday('sv', moment([2005, 2, 27])).should.be.true('Påskdagen.');
    component.isHoliday('sv', moment([2005, 2, 28])).should.be.true('Annandag påsk.');
    component.isHoliday('sv', moment([2005, 4, 1])).should.be.true('Första maj.');
    component.isHoliday('sv', moment([2005, 4, 5])).should.be.true('Kristi himmelfärsdag.');
    component.isHoliday('sv', moment([2005, 4, 15])).should.be.true('Pingstdagen.');
    component.isHoliday('sv', moment([2005, 5, 6])).should.be.true('Sveriges nationaldag.');
    component.isHoliday('sv', moment([2005, 5, 25])).should.be.true('Midsommardagen.');
    component.isHoliday('sv', moment([2005, 10, 5])).should.be.true('Alla helgons dag.');
    component.isHoliday('sv', moment([2005, 11, 25])).should.be.true('Juldagen.');
    component.isHoliday('sv', moment([2005, 11, 26])).should.be.true('Annandag jul.');
    component.isHoliday('sv', moment([2005, 4, 4])).should.be.false('Vanlig vardag.');
    done();
  });


  it('is not a #isHoliday - en', done => {
    const component = TestUtils.renderIntoDocument(
      <DatePicker />
    );
    component.isSemiHoliday('en', moment([2005, 4, 14])).should.be.false();
    done();
  });


  it('is out of month #isOutOfMonth', done => {
    const component = TestUtils.renderIntoDocument(
      <DatePicker />
    );
    component.isOutOfMonth(2005, 4, moment([2005, 4, 1])).should.be.false();
    component.isOutOfMonth(2005, 3, moment([2005, 4, 1])).should.be.true();
    component.isOutOfMonth(2005, 5, moment([2005, 4, 1])).should.be.true();
    component.isOutOfMonth(2006, 4, moment([2005, 4, 1])).should.be.true();
    done();
  });


  it('is semi-holiday - sv', done => {
    const component = TestUtils.renderIntoDocument(
      <DatePicker />
    );
    component.isSemiHoliday('sv', moment([2005, 4, 9])).should.be.false();
    component.isSemiHoliday('sv', moment([2005, 4, 10])).should.be.false();
    component.isSemiHoliday('sv', moment([2005, 4, 11])).should.be.false();
    component.isSemiHoliday('sv', moment([2005, 4, 12])).should.be.false();
    component.isSemiHoliday('sv', moment([2005, 4, 13])).should.be.false();
    component.isSemiHoliday('sv', moment([2005, 4, 14])).should.be.true();
    component.isSemiHoliday('sv', moment([2005, 4, 15])).should.be.false();
    done();
  });


  it('is semi-holiday en', done => {
    const component = TestUtils.renderIntoDocument(
      <DatePicker />
    );
    component.isSemiHoliday('en', moment([2005, 4, 14])).should.be.false();
    done();
  });


  it('properly handles regular swedish businessdays', done => {
    const component = TestUtils.renderIntoDocument(
      <DatePicker />
    );
    component.isBusinessDay('sv', moment([2005, 4, 2])).should.be.true();
    component.isBusinessDay('sv', moment([2005, 4, 3])).should.be.true();
    component.isBusinessDay('sv', moment([2005, 4, 4])).should.be.true();
    component.isBusinessDay('sv', moment([2005, 4, 5])).should.be.false();
    component.isBusinessDay('sv', moment([2005, 4, 6])).should.be.true();
    component.isBusinessDay('sv', moment([2005, 4, 7])).should.be.false();
    component.isBusinessDay('sv', moment([2005, 4, 8])).should.be.false();
    done();
  });


  it('properly handles regular en/int businessdays', done => {
    const component = TestUtils.renderIntoDocument(
      <DatePicker />
    );
    component.isBusinessDay('en', moment([2005, 4, 5])).should.be.true();
    component.isBusinessDay('en', moment([2005, 4, 7])).should.be.true();
    component.isBusinessDay('en', moment([2005, 4, 8])).should.be.true();
    done();
  });


  it('properly handles date types', done => {
    const component = TestUtils.renderIntoDocument(
      <DatePicker alterDateTypes={(types, date) => {
        if (_.isEqual(date.toArray().slice(0, 3), moment([2005, 5, 5]).toArray().slice(0, 3))) {
          return _.union(types, ['unselectable']);
        } else {
          return types;
        }
      }} />
    );
      const eqArray = ['holiday', 'out-of-month', 'semi-holiday'];
      component.getDateTypes('sv', 2005, 4, moment([2005, 5, 25])).should.deepEqual(eqArray);
       _.contains( component.getDateTypes('sv', 2005, 4, moment()), 'today').should.be.true();
      //_.contains( component.getDateTypes('sv', 2005, 4, moment([2005, 5, 5])), 'unselectable' ).should.be(true);
      done();
  });


  it('detects beginning of week (swedish)', done => {
    const component = TestUtils.renderIntoDocument(
      <DatePicker />
    );
    component.getBeginningOfWeek('sv', moment([2005, 4, 5])).toArray().slice(0, 3).should.deepEqual([2005, 4, 2]);
    component.getBeginningOfWeek('sv', moment([2005, 4, 2])).toArray().slice(0, 3).should.deepEqual([2005, 4, 2]);
    done();
  });


  it('detects beginning of week (int/eng)', done => {
    const component = TestUtils.renderIntoDocument(
      <DatePicker />
    );
    component.getBeginningOfWeek('en', moment([2005, 4, 5])).toArray().slice(0, 3).should.deepEqual([2005, 4, 1]);
    component.getBeginningOfWeek('en', moment([2005, 4, 2])).toArray().slice(0, 3).should.deepEqual([2005, 4, 1]);
    done();
  });


  it('gets an entire week (swedish)', done => {
    const component = TestUtils.renderIntoDocument(
      <DatePicker />
    );
    const week = {
      dates: [
        {year: 2005, month: 3, date: 25, types: ['business-day', 'out-of-month']},
        {year: 2005, month: 3, date: 26, types: ['business-day', 'out-of-month']},
        {year: 2005, month: 3, date: 27, types: ['business-day', 'out-of-month']},
        {year: 2005, month: 3, date: 28, types: ['business-day', 'out-of-month']},
        {year: 2005, month: 3, date: 29, types: ['business-day', 'out-of-month']},
        {year: 2005, month: 3, date: 30, types: ['out-of-month', 'semi-holiday']},
        {year: 2005, month: 4, date: 1, types: ['holiday']}
      ],
      number: 17
    };
    component.getWeek('sv', 2005, 4, moment([2005, 3, 25])).should.deepEqual(week);
    done();
  });


  it('gets an entire week (int/en)', done => {
    const component = TestUtils.renderIntoDocument(
      <DatePicker />
    );
    const week = {
      dates: [
        {year: 2005, month: 4, date: 1, types: ['business-day']},
        {year: 2005, month: 4, date: 2, types: ['business-day']},
        {year: 2005, month: 4, date: 3, types: ['business-day']},
        {year: 2005, month: 4, date: 4, types: ['business-day']},
        {year: 2005, month: 4, date: 5, types: ['business-day']},
        {year: 2005, month: 4, date: 6, types: ['business-day']},
        {year: 2005, month: 4, date: 7, types: ['business-day']}
      ],
      number: 19
    };
    component.getWeek('en', 2005, 4, moment([2005, 4, 1])).should.deepEqual(week);
    done();
  });


  it('gets the days of the week (swedish)', done => {
    const component = TestUtils.renderIntoDocument(
      <DatePicker />
    );
    const weekDays = [
      {name: 'mån'},
      {name: 'tis'},
      {name: 'ons'},
      {name: 'tor'},
      {name: 'fre'},
      {name: 'lör'},
      {name: 'sön'}
    ];
    component.getWeekdays('sv').should.deepEqual(weekDays);
    done();
  });


  it('gets the days of the week (int/en)', done => {
    const component = TestUtils.renderIntoDocument(
      <DatePicker />
    );
    const weekDays = [
      {name: 'Sun'},
      {name: 'Mon'},
      {name: 'Tue'},
      {name: 'Wed'},
      {name: 'Thu'},
      {name: 'Fri'},
      {name: 'Sat'}
    ];
    component.getWeekdays('en').should.deepEqual(weekDays);
    done();
  });

});
