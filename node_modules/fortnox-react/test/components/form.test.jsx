import React from 'react';
import TestUtils from 'react-dom/test-utils';
import Backbone from 'utils/BackboneAdapter';
import 'utils/AjaxStub'


import FieldText from 'form/TextBox';
import FieldNumeric from 'form/Numeric';

describe('Form TextField', () => {

	it('Renders a FieldText using databinding', done => {
		const m = new Backbone.Model();
		const component = TestUtils.renderIntoDocument(
			<FieldText model={m} modelProp="airplane" />
		);

		const input = TestUtils.findRenderedDOMComponentWithTag(component, 'input');
		TestUtils.Simulate.change(input, { target: { value: 'Spitfire' } });
		TestUtils.Simulate.blur(input);
		m.get('airplane').should.equal('Spitfire');
		input.value.should.equal('Spitfire');
		m.set('airplane', 'MIG-29');
		input.value.should.equal('MIG-29');
		done();
	});

	it('Renders a FieldText with a tooltip', done => {
		const m = new Backbone.Model();
		const component = TestUtils.renderIntoDocument(
			<FieldText model={m} modelProp="airplane" tooltip="A Tooltip!" />
		);
		const input = TestUtils.findRenderedDOMComponentWithClass(component, 'hint');
		input.getAttribute('data-hint').should.equal('A Tooltip!');
		done();
	});

	it('Renders a FieldText with a title', done => {
		const m = new Backbone.Model();
		const component = TestUtils.renderIntoDocument(
			<FieldText model={m} modelProp="airplane" title="TheTitle" />
		);
		const el = TestUtils.findRenderedDOMComponentWithTag(component, 'label');
		el.textContent.should.equal('TheTitle');
		done();
	});

	it('Renders a FieldText with custom validator on the model', done => {
		const validateNameFn = value => {
			return value === 'a' ? true : 'Value needs to be the letter a';
		};

		const Car = Backbone.Model.extend({
			defaults: {
				name: 'Range Rover Sport',
				guid: 90009998881
			},

			validators: {
				validateName: validateNameFn
			}
		});

		const component = TestUtils.renderIntoDocument(
			<FieldText model={new Car()} modelProp="name" validator="validateName" />
		);
		const input = TestUtils.findRenderedDOMComponentWithTag(component, 'input');
		TestUtils.Simulate.change(input, { target: { value: 'incorrect' } });
		TestUtils.Simulate.blur(input);
		TestUtils.findRenderedDOMComponentWithClass(component, 'hint').getAttribute('data-hint').should.equal('Value needs to be the letter a');
		TestUtils.Simulate.change(input, { target: { value: 'a' } });
		TestUtils.Simulate.blur(input);
		TestUtils.scryRenderedDOMComponentsWithClass(component, 'hint').length.should.equal(0);
		done();

	});


});

describe('Form FieldNumeric', () => {

	it('Renders a FieldNumeric with a validation tooltip', done => {
		const m = new Backbone.Model();
		const component = TestUtils.renderIntoDocument(
			<FieldNumeric model={m} modelProp="price" />
		);
		const el = TestUtils.findRenderedDOMComponentWithTag(component, 'input');
		TestUtils.Simulate.change(el, { target: { value: 'not a number' } });
		TestUtils.Simulate.blur(el);
		const tooltipEl = TestUtils.findRenderedDOMComponentWithClass(component, 'hint');
		tooltipEl.getAttribute('data-hint').should.equal('Fältet får endast innehålla siffror.');
		done();
	});

});


describe('Form tooltips', () => {

	it('Tooltips are properly removed when validateProps is rerun after clearing a model', done => {
		const MyModel = Backbone.Model.extend({
			validators: {
				name(value){
					return value.length > 5 ? true : 'Error must be min 5 chars';
				}
			}
		});
		const person = new MyModel();
		const component = TestUtils.renderIntoDocument(
			<FieldText model={person} modelProp="name" validator="name" />
		);
		const input = TestUtils.findRenderedDOMComponentWithTag(component, 'input');
		TestUtils.scryRenderedDOMComponentsWithClass(component, 'hint').length.should.equal(0);
		input.value = '123';
		TestUtils.Simulate.change(input);
		TestUtils.Simulate.blur(input);
		TestUtils.scryRenderedDOMComponentsWithClass(component, 'hint').length.should.equal(1);
		person.set('name', '');
		person.validateProps();
		TestUtils.scryRenderedDOMComponentsWithClass(component, 'hint').length.should.equal(0);
		done();
	});

});
