import React from 'react';
import ReactDOM from 'react-dom';
import TestUtils from 'react-dom/test-utils';
import Backbone from 'utils/BackboneAdapter';
import FieldMoney from 'form/Money';

import 'utils/AjaxStub'

describe('Form FieldMoney', () => {

	it('Formats numeric values correctly', done => {
		const m = new Backbone.Model();
		const component = TestUtils.renderIntoDocument(
			<FieldMoney model={m} modelProp="price" />
		);
		const input = TestUtils.findRenderedDOMComponentWithTag(component, 'input');
		//TestUtils.Simulate.change(ReactDOM.findDOMNode(Input));
		input.value = '100';
		TestUtils.Simulate.change(ReactDOM.findDOMNode(input));
		TestUtils.Simulate.blur(ReactDOM.findDOMNode(input));
		m.get('price').should.equal(100);

		input.value = '34.99';
		TestUtils.Simulate.change(ReactDOM.findDOMNode(input));
		TestUtils.Simulate.blur(ReactDOM.findDOMNode(input));

		m.get('price').should.equal(34.99);
		input.value.should.equal('34,99');

		input.value = 'a';
		TestUtils.Simulate.change(ReactDOM.findDOMNode(input));
		TestUtils.Simulate.blur(ReactDOM.findDOMNode(input));

		input.value.should.equal('0,00');
		m.get('price').should.equal(0);
		done();
	});


	it('Doesnt run format multiple times on the same value after multiple blurs', done => {
		const m = new Backbone.Model();
		const component = TestUtils.renderIntoDocument(
			<FieldMoney model={m} modelProp="price" />
		);
		const input = TestUtils.findRenderedDOMComponentWithTag(component, 'input');
		input.value = '100';
		TestUtils.Simulate.change(ReactDOM.findDOMNode(input));
		TestUtils.Simulate.blur(ReactDOM.findDOMNode(input));
		input.value.should.equal('100,00');

		TestUtils.Simulate.change(ReactDOM.findDOMNode(input));
		TestUtils.Simulate.blur(ReactDOM.findDOMNode(input));
		input.value.should.equal('100,00');
		done();
	});

	it('Formats initial value from model correctly', done => {
		const m = new Backbone.Model({Â price: 10 });
		const component = TestUtils.renderIntoDocument(
			<FieldMoney model={m} modelProp="price" />
		);
		const input = TestUtils.findRenderedDOMComponentWithTag(component, 'input');
		input.value.should.equal('10,00');
		done();
	});

});
