import React from 'react';
import ReactDOM from 'react-dom';
import TestUtils from 'react-dom/test-utils';
import Backbone from 'utils/BackboneAdapter';
import FieldSelect from 'form/Select';

import 'utils/AjaxStub'

describe('Form FieldSelect', () => {

	it('Should render correct values based on collection/map', done => {
		const cars = new Backbone.Collection([
			{brand: 'Toyota', type: 'Prius'},
			{brand: 'BMW', type: 'i3'},
			{brand: 'Volvo', type: 'XC60'},
			{brand: 'Landrover', type: 'Defender'}
		]);
		const map = {
			caption:'brand',
			modelProp:'type'
		};
		const carModel = new Backbone.Model();

		const component = TestUtils.renderIntoDocument(
			<FieldSelect
				collection={cars}
				map={map}
				defaultOption={{ value: 'Opel Blerfh', caption: 'Opel' }}
				modelProp="foo"
				model={carModel} />
		);
		const options = TestUtils.scryRenderedDOMComponentsWithTag(component, 'option');

		//4 but should be 5 with the defaultoption included, one more option-tag.
		options.length.should.equal(5);

		//Opel is the defaultoption, not part of the collection
		options[0].textContent.should.equal('Opel');

		options[1].textContent.should.equal('Toyota');
		options[2].textContent.should.equal('BMW');
		options[3].textContent.should.equal('Volvo');
		options[4].textContent.should.equal('Landrover');

		cars.at(1).set('brand', 'Bugati');

		options[2].textContent.should.equal('Bugati');

		done();
	});

	it('Should handle 2-way databinding', done => {
		const cars = new Backbone.Collection([
			{brand: 'Toyota', type: 'Prius'},
			{brand: 'BMW', type: 'i3'},
			{brand: 'Volvo', type: 'XC60'},
			{brand: 'Landrover', type: 'Defender'}
		]);
		const map = {
			caption:'brand',
			modelProp:'type'
		};
		const carModel = new Backbone.Model();

		const component = TestUtils.renderIntoDocument(
			<FieldSelect
				collection={cars}
				map={map}
				defaultOption={{ value: 'Opel Blerfh', caption: 'Opel' }}
				modelProp="type"
				model={carModel} />
		);
		const select = TestUtils.findRenderedDOMComponentWithTag(component, 'select');
		select.value.should.equal('Opel Blerfh');

		select.value = 'Defender';
		TestUtils.Simulate.change(ReactDOM.findDOMNode(select));
		TestUtils.Simulate.blur(ReactDOM.findDOMNode(select));
		carModel.get('type').should.equal('Defender');
		carModel.set('type', 'XC60');
		select.value.should.equal('XC60');
		done();

	});


	it('Should run through onModelSync', done => {
		const cars = new Backbone.Collection([
			{brand: 'Toyota', type: 'Prius'},
			{brand: 'BMW', type: 'i3'},
			{brand: 'Volvo', type: 'XC60'},
			{brand: 'Landrover', type: 'Defender'}
		]);
		const map = {
			caption:'brand',
			modelProp:'type'
		};
		const carModel = new Backbone.Model();
		const onModelSyncfn = (model, modelProp, value) => {
			return model.set(modelProp, value);
		};

		const component = TestUtils.renderIntoDocument(
			<FieldSelect
				collection={cars}
				map={map}
				defaultOption={{ value: 'Opel Blerfh', caption: 'Opel' }}
				modelProp="type"
				onModelSync={onModelSyncfn}
				model={carModel} />
		);
		const select = TestUtils.findRenderedDOMComponentWithTag(component, 'select');
		select.value = 'i3';
		TestUtils.Simulate.change(ReactDOM.findDOMNode(select));
		TestUtils.Simulate.blur(ReactDOM.findDOMNode(select));
		carModel.get('type').should.equal('i3');
		done();
	});


	it('Supports tooltips', done => {
		const cars = new Backbone.Collection([
			{brand: 'Toyota', type: 'Prius'},
			{brand: 'BMW', type: 'i3'},
			{brand: 'Volvo', type: 'XC60'},
			{brand: 'Landrover', type: 'Defender'}
		]);
		const map = {
			caption:'brand',
			modelProp:'type'
		};
		const carModel = new Backbone.Model();

		const component = TestUtils.renderIntoDocument(
			<FieldSelect
				collection={cars}
				map={map}
				defaultOption={{ value: 'Opel Blerfh', caption: 'Opel' }}
				modelProp="type"
				tooltip="banana"
				model={carModel} />
		);
		TestUtils.scryRenderedDOMComponentsWithClass(component, 'hint').length.should.equal(1);
		done();
	});

});
