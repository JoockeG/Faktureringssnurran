import React from 'react';
import 'should';
import sinon from 'sinon';
import { mount } from 'enzyme';

import Backbone from 'utils/BackboneAdapter';
import RegisterDropDown from 'utils/RegisterDropDown';
import AppContainer from 'utils/AppContainer';

const RegisterCollection = RegisterDropDown.defaultProps.collection;
const RegisterModel = RegisterCollection.model;

describe('Registers dropdown', () => {
	const sandbox = sinon.sandbox.create();

	const mockSessionStorage = (locale) => {
		global.sessionStorage = {
			getItem: () => JSON.stringify({ locale })
		};
	};

	beforeEach(() => {
		sandbox.stub(AppContainer, 'isFramedContext').withArgs().returns(true);
	});

	afterEach(() => {
		sandbox.restore();
		delete global.sessionStorage;
	});

	it('Uses postMessage on click', (done) => {
		const collectionUnderTest = new (Backbone.Collection.extend({}))([{
			code: 'stubcode',
			url: 'stuburl',
			label: 'stublabel'
		}]);
		const fetchMock = sandbox.mock(collectionUnderTest, 'fetch');
		fetchMock.expects('fetch').once().withArgs().returns(Promise.resolve());

		sandbox.stub(window.parent, 'postMessage', (...args) => {
			args[0].should.eql({ type: 'navigate-v1', route: 'stuburl' });
			args[1].should.eql('*');
			done();
		});

		const wrapper = mount(<RegisterDropDown collection={collectionUnderTest} eventbus={{}} />);
		setTimeout(() => {
			wrapper.find('span.dropdown-btn').simulate('mouseDown');
			wrapper.find('ul.menudown li a').simulate('click');
		}, 10);
	});

	it('Publishes a message on the eventbus on errors', (done) => {
		const collectionUnderTest = new (Backbone.Collection.extend({}))();
		const fetchMock = sandbox.mock(collectionUnderTest, 'fetch');
		fetchMock.expects('fetch').once().withArgs().returns(Promise.reject());

		const eventbusUnderTest = {
			trigger: (...args) => {
				fetchMock.verify();
				args[0].should.eql('message:action');
				args[1].should.eql('Register är för närvarande inte tillgängliga. Försök igen senare.');
				done();
			}
		};

		let registerDropDown = <RegisterDropDown collection={collectionUnderTest} eventbus={eventbusUnderTest} />;
		const wrapper = mount(
			registerDropDown
		);
		mount(registerDropDown);
		setTimeout(() => {wrapper.find('span.dropdown-btn').simulate('mouseDown')}, 10);
	});

	it('Returns label matching the locale', (done) => {
		const model = new RegisterModel();

		const getRegistry = () => ({
			titles: {
				en_GB: 'Alpacas',
				sv_SE: 'Alpackor'
			}
		});

		let registry;

		mockSessionStorage('en_GB');
		registry = model.parse(getRegistry());
		registry.label.should.equal('Alpacas');

		mockSessionStorage('sv_SE');
		registry = model.parse(getRegistry());
		registry.label.should.equal('Alpackor');

		mockSessionStorage('hoers');
		registry = model.parse(getRegistry());
		registry.label.should.equal('Alpackor');

		done();
	});
});
