import React from 'react';
import 'utils/AjaxStub';
import { mount } from 'enzyme';
import AccessHidden from 'accessrights/Hidden';

describe('AccessHidden', () => {
	const target = <p>Alpacas are awesome!</p>;

	const assertEnabled = (done, component) => {
		const mounted = mount(component);

		setTimeout(() => {
			mounted.state('assertion').should.be.true();
			mounted.update().contains(target).should.be.true();
			done();
		}, 0);
	};

	const assertDisabled = (done, component) => {
		const mounted = mount(component);

		setTimeout(() => {
			mounted.state('assertion').should.be.false();
			mounted.update().contains(target).should.be.false();
			done();
		}, 0);
	};

	it('Renders an AccessHidden component with visible content', (done) => {
		assertEnabled(done, (
			<AccessHidden assert="bf.altervoucher">
				{target}
			</AccessHidden>
		));
	});

	it('Renders an AccessHidden component with invisible content', (done) => {
		assertDisabled(done, (
			<AccessHidden assert="bf.doodad">
				{target}
			</AccessHidden>
		));
	});

	it('Renders an AccessHidden component when rights is just a domain', (done) => {
		assertEnabled(done, (
			<AccessHidden assert="bf">
				{target}
			</AccessHidden>
		));
	});

	it('Renders an AccessHidden component when rights is just a domain', (done) => {
		assertDisabled(done, (
			<AccessHidden assert="lon">
				{target}
			</AccessHidden>
		));
	});

	it('Renders an AccessHidden component with accessgranted based on a list of rights', (done) => {
		assertEnabled(done, (
			<AccessHidden assert={['bf.altervoucher', 'kf.bookinvoice']}>
				{target}
			</AccessHidden>
		));
	});

	it('Renders an AccessHidden component with accessgranted using a promise', (done) => {
		assertEnabled(done, (
			<AccessHidden assert={new Promise((resolve) => { resolve(); })}>
				{target}
			</AccessHidden>
		));
	});

	it('Renders an AccessHidden component with accessdenied using a promise', (done) => {
		assertDisabled(done, (
			<AccessHidden assert={new Promise((resolve, reject) => { reject(); })}>
				{target}
			</AccessHidden>
		));
	});
});
