import React from 'react';
import 'utils/AjaxStub';
import { mount } from 'enzyme';
import AccessDisabled from 'accessrights/Disabled';

describe('AccessDisabled', () => {
	const assertEnabled = (done, component) => {
		const mounted = mount(component);
		mounted.update();
		setTimeout(() => {
			const disabled = mounted.update().find('input[disabled]');
			disabled.should.have.length(0);
			done();
		}, 0);
	};

	const assertDisabled = (done, component) => {
		const mounted = mount(component);
		mounted.update();
		setTimeout(() => {
			const disabled = mounted.update().find('input[disabled]');
			disabled.should.have.length(1);
			done();
		}, 0);
	};

	it('Renders an AccessDisabled component with input child, it should be enabled', (done) => {
		assertEnabled(done, (
			<AccessDisabled assert="bf.altervoucher">
				<input />
			</AccessDisabled>
		));
	});

	it('Renders an AccessDisabled component with input child, should be disabled', (done) => {
		assertDisabled(done, (
			<AccessDisabled assert="bf.doodad">
				<input />
			</AccessDisabled>
		));
	});

	it('Renders an AccessDisabled using function/cb to assert right, enabled/right exists', (done) => {
		assertEnabled(done, (
			<AccessDisabled assert={rights => rights.has('bf.altervoucher')}>
				<input />
			</AccessDisabled>
		));
	});

	it('Renders an AccessDisabled using function/cb to assert right, disabled/right missing', (done) => {
		assertDisabled(done, (
			<AccessDisabled assert={rights => rights.has('bf.doodad')}>
				<input />
			</AccessDisabled>
		));
	});

	it('Renders an AccessDisabled using function/cb to assert right, right set to 0 = disabled', (done) => {
		assertDisabled(done, (
			<AccessDisabled assert={rights => rights.has('bf.isactuallyzero')}>
				<input />
			</AccessDisabled>
		));
	});

	it('Renders an AccessDisabled where user has permission but some other state is overriding disabled property', (done) => {
		assertDisabled(done, (
			<AccessDisabled assert="bf.altervoucher">
				<input type="text" disabled />
			</AccessDisabled>
		));
	});
});
