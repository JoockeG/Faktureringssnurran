import getBranding from 'utils/Branding';

describe('Branding', () => {
	beforeEach(() => {
		global.window = {
			brandingConfig: {
				alpaca: {
					awesomeness: Infinity,
					floof: {
						softness: Infinity
					}
				}
			}
		};
	});

	after(() => {
		delete global.window;
	});

	it('Returns an empty object when window is missing', () => {
		delete global.window;
		const branding = getBranding('spoon', 'curve');
		branding.should.be.an.Object().and.be.empty();
	});

	it('Returns an empty object when branding is missing', () => {
		delete global.window.brandingConfig;
		const branding = getBranding('spoon', 'curve');
		branding.should.be.an.Object().and.be.empty();
	});

	it('Returns an empty object when nested object is missing', () => {
		const branding = getBranding('alpaca', 'greed');
		branding.should.be.an.Object().and.be.empty();
	});

	it('Returns the root object when called without parameters', () => {
		const branding = getBranding();
		branding.should.be.an.Object().and.not.be.empty();
		branding.alpaca.awesomeness.should.equal(Infinity);
	});

	it('Returns the nested object when called with parameters', () => {
		const branding = getBranding('alpaca', 'floof');
		branding.should.be.an.Object().and.not.be.empty();
		branding.softness.should.equal(Infinity);
	});
});
